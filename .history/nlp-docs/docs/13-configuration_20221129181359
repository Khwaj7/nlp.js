/Users/jordicarbonell/workspace/sa/nlp.js/packages/bert-open-question/src/bert-open-question.js

/Users/jordicarbonell/workspace/sa/nlp.js/packages/bot/src/bot.js

this.settings.globalFallbackDialog = '/globalFallbackDialog'

| globalFallbackDialog  | name of the dialog to be executed in case of errors while processing the bot flow |



/Users/jordicarbonell/workspace/sa/nlp.js/packages/bot/src/dialog-manager.js
  42,24:     this.applySettings(this.settings, settings);
  43,10:     if (!this.settings.tag) {
  44,7:       this.settings.tag = `dialog-manager`;
  48,7:       this.settings,
  49,39:       this.container.getConfiguration(this.settings.tag)

/Users/jordicarbonell/workspace/sa/nlp.js/packages/bot/src/test-connector.js
  32,5:     this.settings.settings = this.settings.settings || {};
  32,30:     this.settings.settings = this.settings.settings || {};
  61,21:     const botName = this.settings.botName || 'bot';
  63,9:     if (this.settings.debug && typeof message === 'object' && !reference) {
  68,9:     if (this.settings.settings.trimInput) {
  75,22:     const userName = this.settings.userName || 'user';
  80,23:       const name = `${this.settings.tag}.hear`;
  91,38:           const { conversationId } = this.settings.settings;
  131,20:       .map((x) => (this.settings.settings.trimInput ? trimInput(x) : x));
  156,22:     const userName = this.settings.userName || 'user';

/Users/jordicarbonell/workspace/sa/nlp.js/packages/builtin-compromise/src/builtin-compromise.js
  79,24:     this.applySettings(this.settings, settings);
  80,10:     if (!this.settings.tag) {
  81,7:       this.settings.tag = `builtin-compromise`;
  85,7:       this.settings,
  86,39:       this.container.getConfiguration(this.settings.tag)
  91,42:     this.container.registerConfiguration(this.settings.tag, {}, false);

/Users/jordicarbonell/workspace/sa/nlp.js/packages/builtin-default/src/builtin-default.js
  36,24:     this.applySettings(this.settings, settings);
  37,10:     if (!this.settings.tag) {
  38,7:       this.settings.tag = 'builtin-default';
  42,7:       this.settings,
  43,39:       this.container.getConfiguration(this.settings.tag)
  85,37:     const builtins = srcBuiltins || this.settings.builtins;

/Users/jordicarbonell/workspace/sa/nlp.js/packages/builtin-duckling/src/builtin-duckling.js
  63,24:     this.applySettings(this.settings, settings);
  64,10:     if (!this.settings.tag) {
  65,7:       this.settings.tag = `builtin-duckling`;
  69,7:       this.settings,
  70,39:       this.container.getConfiguration(this.settings.tag)
  72,26:     this.url = url.parse(this.settings.ducklingUrl);
  82,7:       this.settings.tag,

/Users/jordicarbonell/workspace/sa/nlp.js/packages/builtin-microsoft/src/builtin-microsoft.js
  69,24:     this.applySettings(this.settings, settings);
  70,10:     if (!this.settings.tag) {
  71,7:       this.settings.tag = `builtin-microsoft`;
  75,7:       this.settings,
  76,39:       this.container.getConfiguration(this.settings.tag)
  78,5:     this.settings.builtinAllowList = {};
  79,25:     for (let i = 0; i < this.settings.allowList.length; i += 1) {
  80,7:       this.settings.builtinAllowList[this.settings.allowList[i]] = 1;
  80,38:       this.settings.builtinAllowList[this.settings.allowList[i]] = 1;
  308,37:     const builtins = srcBuiltins || this.settings.builtins;
  328,15:           if (this.settings.builtinAllowList[entityName]) {

/Users/jordicarbonell/workspace/sa/nlp.js/packages/connector/src/connector.js
  36,24:     this.applySettings(this.settings, settings);
  38,10:     if (!this.settings.tag) {
  39,7:       this.settings.tag = this.getSnakeName();
  42,7:       this.settings,
  43,39:       this.container.getConfiguration(this.settings.tag)

/Users/jordicarbonell/workspace/sa/nlp.js/packages/console-connector/src/console-connector.js
  47,21:     const botName = this.settings.botName || 'bot';
  48,9:     if (this.settings.debug && typeof message === 'object' && !reference) {
  63,23:       const name = `${this.settings.tag}.hear`;

/Users/jordicarbonell/workspace/sa/nlp.js/packages/core/src/context.js
  36,24:     this.applySettings(this.settings, settings);
  37,10:     if (!this.settings.tag) {
  38,7:       this.settings.tag = 'context';
  41,7:       this.settings,
  42,39:       this.container.getConfiguration(this.settings.tag)
  47,40:     const storage = this.container.get(this.settings.storageName || 'storage');
  56,28:     return storage.read(`${this.settings.tag}-${key}`);

/Users/jordicarbonell/workspace/sa/nlp.js/packages/core/src/memory-storage.js
  36,24:     this.applySettings(this.settings, settings);
  37,24:     this.applySettings(this.settings, { etag: 1, memory: {} });
  38,10:     if (!this.settings.tag) {
  39,7:       this.settings.tag = 'storage';
  42,7:       this.settings,
  43,39:       this.container.getConfiguration(this.settings.tag)
  54,22:         const item = this.settings.memory[key];
  65,18:     clone.eTag = this.settings.etag.toString();
  66,5:     this.settings.etag += 1;
  67,5:     this.settings.memory[key] = JSON.stringify(clone);
  75,24:         const oldStr = this.settings.memory[key];
  92,36:       keys.forEach((key) => delete this.settings.memory[key]);

/Users/jordicarbonell/workspace/sa/nlp.js/packages/database/src/database.js
  37,24:     this.applySettings(this.settings, settings);
  38,10:     if (!this.settings.tag) {
  39,7:       this.settings.tag = `database`;
  43,7:       this.settings,
  44,39:       this.container.getConfiguration(this.settings.tag)
  51,27:       new MemorydbAdapter(this.settings.memory, this.container)

/Users/jordicarbonell/workspace/sa/nlp.js/packages/database/src/memory-adapter.js
  36,24:     this.applySettings(this.settings, settings);
  37,10:     if (!this.settings.tag) {
  38,7:       this.settings.tag = 'memorydb-adapter';
  42,9:     if (this.settings.autosave === undefined) {
  43,7:       this.settings.autosave = false;
  45,9:     if (this.settings.autosaveInterval === undefined) {
  46,7:       this.settings.autosaveInterval = 0;
  48,9:     if (this.settings.autosaveFolder === undefined) {
  49,7:       this.settings.autosaveFolder = './';
  64,34:       const fileName = path.join(this.settings.autosaveFolder, `${name}.json`);
  72,32:     const fileName = path.join(this.settings.autosaveFolder, `${name}.json`);
  79,32:     const fileName = path.join(this.settings.autosaveFolder, `${name}.json`);
  98,10:     if (!this.settings.autosave) {
  101,9:     if (this.settings.autosaveInterval === 0) {
  108,9:         this.settings.autosaveInterval * 1000
  116,11:       if (this.settings.autosave && this.existsCollectionFile(name)) {

/Users/jordicarbonell/workspace/sa/nlp.js/packages/dialogflow-connector/src/dialogflow-connector.js
  34,10:     if (!this.settings.apiTag) {
  35,7:       this.settings.apiTag = '/fulfillment';
  37,17:     server.post(this.settings.apiTag, this.app);

/Users/jordicarbonell/workspace/sa/nlp.js/packages/directline-connector/src/directline-connector.js
  32,9:     if (this.settings.autoRemoveFiles === undefined) {
  33,7:       this.settings.autoRemoveFiles = true;
  35,9:     if (this.settings.uploadDir === undefined) {
  36,7:       this.settings.uploadDir = './uploads/';
  38,9:     if (this.settings.maxFileSize === undefined) {
  39,7:       this.settings.maxFileSize = 8000000;
  52,9:     if (this.settings.log) {
  62,48:     this.controller = new DirectlineController(this.settings, this);
  129,22:           uploadDir: this.settings.uploadDir,
  131,24:           maxFileSize: this.settings.maxFileSize,
  145,17:             if (this.settings.autoRemoveFiles) {

/Users/jordicarbonell/workspace/sa/nlp.js/packages/directline-connector/src/directline-controller.js
  30,5:     this.settings = settings;
  33,7:       this.settings.serviceUrl ||
  36,19:     this.botUrl = this.settings.botUrl || process.env.DIRECTLINE_BOT_URL;
  37,22:     this.expiresIn = this.settings.expiresIn || 1800;
  165,18:             app: this.settings.container.name,
  175,23:           const bot = this.settings.container.get('bot');
  179,27:             session.app = this.settings.container.name;
  183,25:             const nlp = this.settings.container.get('nlp');
  191,24:                   app: this.settings.container.name,

/Users/jordicarbonell/workspace/sa/nlp.js/packages/express-api-server/src/express-api-app.js
  31,5:     this.settings = settings || {};
  58,9:     if (this.settings.serveBot) {
  60,9:         this.settings.clientPath || path.join(__dirname, './public');
  68,20:       this.app.use(this.settings.apiRoot, router);

/Users/jordicarbonell/workspace/sa/nlp.js/packages/express-api-server/src/express-api-server.js
  36,24:     this.applySettings(this.settings, settings);
  38,10:     if (!this.settings.tag) {
  39,7:       this.settings.tag = 'api-server';
  42,7:       this.settings,
  43,39:       this.container.getConfiguration(this.settings.tag)
  45,10:     if (!this.settings.apiRoot) {
  46,7:       this.settings.apiRoot = '/api';
  70,32:     const port = input.port || this.settings.port;
  72,7:       this.settings,
  81,24:         logger.info(`${this.settings.tag} listening on port ${port}!`);

/Users/jordicarbonell/workspace/sa/nlp.js/packages/express-api-serverless/src/express-api-serverless.js
  36,24:     this.applySettings(this.settings, settings);
  38,10:     if (!this.settings.tag) {
  39,7:       this.settings.tag = 'api-server';
  42,7:       this.settings,
  43,39:       this.container.getConfiguration(this.settings.tag)
  60,20:     logger.info(`${this.settings.tag} started as serverless`);

/Users/jordicarbonell/workspace/sa/nlp.js/packages/fb-connector/src/fb-connector.js
  50,24:     this.applySettings(this.settings, settings);
  51,10:     if (!this.settings.tag) {
  52,7:       this.settings.tag = 'fb';
  55,7:       this.settings,
  56,39:       this.container.getConfiguration(this.settings.tag)
  96,31:               const name = `${this.settings.tag}.hear`;
  102,29:                 const bot = this.settings.container.get('bot');
  206,21:     let routePath = this.settings.apiPath;
  214,24:       ? `${routePath}${this.settings.messagesPath || '/api/messages'}`
  215,9:       : this.settings.messagesPath || '/api/messages';

/Users/jordicarbonell/workspace/sa/nlp.js/packages/fullbot/src/fullbot.js
  61,5:     this.settings = settings || {};
  63,7:       this.settings.marketUrl || 'https://nlpjsmarket.herokuapp.com/public';
  68,9:     if (this.settings.port) {
  69,44:       result.settings['api-server'].port = this.settings.port;
  71,9:     if (this.settings.scripts) {
  72,37:       result.settings.bot.scripts = this.settings.scripts;
  74,9:     if (this.settings.mongoUrl) {
  76,48:       result.settings['mongodb-adapter'].url = this.settings.mongoUrl;
  92,9:     if (this.settings.ner && this.settings.ner.ducklingUrl) {
  92,30:     if (this.settings.ner && this.settings.ner.ducklingUrl) {
  93,43:       const builtin = new BuiltinDuckling(this.settings.ner);
  96,44:       const builtin = new BuiltinMicrosoft(this.settings.ner);
  99,9:     if (this.settings.mongoUrl || process.env.MONGO_URL) {
  108,18:     let folder = this.settings[`${name}Path`];
  109,20:     if (!folder && this.settings.botPath) {
  110,26:       folder = path.join(this.settings.botPath, name);
  224,12:       dir: this.settings.botPath || './bot',

/Users/jordicarbonell/workspace/sa/nlp.js/packages/mongodb-adapter/src/mongodb-adapter.js
  38,24:     this.applySettings(this.settings, settings);
  39,10:     if (!this.settings.tag) {
  40,7:       this.settings.tag = 'mongodb-adapter';
  42,10:     if (!this.settings.url) {
  43,7:       this.settings.url = process.env.MONGO_URL;
  45,10:     if (!this.settings.dbName && this.settings.url) {
  45,34:     if (!this.settings.dbName && this.settings.url) {
  46,7:       this.settings.dbName = this.settings.url.slice(
  46,30:       this.settings.dbName = this.settings.url.slice(
  47,9:         this.settings.url.lastIndexOf('/') + 1
  50,40:     this.mongoClient = new MongoClient(this.settings.url, {

/Users/jordicarbonell/workspace/sa/nlp.js/packages/msbf-connector/src/msbf-connector.js
  38,24:     this.applySettings(this.settings, settings);
  39,10:     if (!this.settings.tag) {
  40,7:       this.settings.tag = 'msbf';
  43,7:       this.settings,
  44,39:       this.container.getConfiguration(this.settings.tag)
  54,14:       appId: this.settings.appId || process.env.MSBF_BOT_APP_ID,
  56,9:         this.settings.botPassword || process.env.MSBF_BOT_APP_PASSWORD,
  61,21:     let routePath = this.settings.apiPath;
  69,24:       ? `${routePath}${this.settings.messagesPath || '/api/messages'}`
  70,9:       : this.settings.messagesPath || '/api/messages';
  90,31:               const name = `${this.settings.tag}.hear`;
  95,29:                 const bot = this.settings.container.get('bot');

/Users/jordicarbonell/workspace/sa/nlp.js/packages/ner/src/ner.js
  45,24:     this.applySettings(this.settings, settings);
  46,24:     this.applySettings(this.settings);
  47,10:     if (!this.settings.tag) {
  48,7:       this.settings.tag = `ner`;
  52,7:       this.settings,
  53,39:       this.container.getConfiguration(this.settings.tag)
  57,44:       pipelineProcess: this.getPipeline(`${this.settings.tag}-process`),
  392,32:     const input = { threshold: this.settings.threshold || 0.8, ...srcInput };
  396,12:         `${this.settings.tag}-${input.locale}-process`
  413,7:       this.settings.entityPreffix === undefined
  415,11:         : this.settings.entityPreffix;
  417,7:       this.settings.entitySuffix === undefined
  419,11:         : this.settings.entitySuffix;
  429,7:       this.settings.entityPreffix === undefined
  431,11:         : this.settings.entityPreffix;
  433,7:       this.settings.entitySuffix === undefined
  435,11:         : this.settings.entitySuffix;
  503,22:       settings: { ...this.settings },
  512,24:     this.applySettings(this.settings, json.settings);

/Users/jordicarbonell/workspace/sa/nlp.js/packages/neural/src/neural-network.js
  38,5:     this.settings = settings;
  39,24:     this.applySettings(this.settings, defaultSettings);
  40,9:     if (this.settings.log === true) {
  45,23:     } else if (typeof this.settings.log === 'function') {
  46,20:       this.logFn = this.settings.log;
  84,27:     return sum <= 0 ? 0 : this.settings.alpha * sum;
  119,33:     const { alpha, momentum } = this.settings;
  172,22:     const minError = this.settings.errorThresh;
  173,22:     const minDelta = this.settings.deltaErrorThresh;
  175,32:       this.status.iterations < this.settings.iterations &&
  182,9:         this.settings.learningRate / (1 + 0.001 * this.status.iterations);
  218,30:     const keys = Object.keys(this.settings);
  221,11:       if (this.settings[key] !== defaultSettings[key]) {
  222,25:         settings[key] = this.settings[key];
  247,5:     this.settings = this.applySettings({

/Users/jordicarbonell/workspace/sa/nlp.js/packages/nlg/src/action-manager.js
  42,24:     this.applySettings(this.settings, settings);
  43,10:     if (!this.settings.tag) {
  44,7:       this.settings.tag = 'action-manager';
  48,7:       this.settings,
  49,39:       this.container.getConfiguration(this.settings.tag)
  54,41:       pipelineFind: this.getPipeline(`${this.settings.tag}-find`),
  183,52:     input.settings = input.settings || settings || this.settings;
  189,22:       settings: { ...this.settings },
  197,24:     this.applySettings(this.settings, json.settings);

/Users/jordicarbonell/workspace/sa/nlp.js/packages/nlg/src/nlg-manager.js
  35,24:     this.applySettings(this.settings, settings);
  36,10:     if (!this.settings.tag) {
  37,7:       this.settings.tag = 'nlg-manager';
  41,7:       this.settings,
  42,39:       this.container.getConfiguration(this.settings.tag)
  46,41:       pipelineFind: this.getPipeline(`${this.settings.tag}-find`),
  203,29:       settings: settings || this.settings,
  222,22:       settings: { ...this.settings },
  230,24:     this.applySettings(this.settings, json.settings);

/Users/jordicarbonell/workspace/sa/nlp.js/packages/nlp/src/context-manager.js
  34,24:     this.applySettings(this.settings, settings);
  35,10:     if (!this.settings.tag) {
  36,7:       this.settings.tag = `context-manager`;
  40,7:       this.settings,
  41,39:       this.container.getConfiguration(this.settings.tag)
  72,11:       if (this.settings.tableName) {
  77,44:           result = (await database.findOne(this.settings.tableName, {
  110,11:       if (this.settings.tableName) {
  115,31:           await database.save(this.settings.tableName, clone);

/Users/jordicarbonell/workspace/sa/nlp.js/packages/nlp/src/nlp.js
  47,24:     this.applySettings(this.settings, settings);
  48,10:     if (!this.settings.tag) {
  49,7:       this.settings.tag = `nlp`;
  53,7:       this.settings,
  54,39:       this.container.getConfiguration(this.settings.tag)
  56,57:     this.nluManager = this.container.get('nlu-manager', this.settings.nlu);
  57,42:     this.ner = this.container.get('ner', this.settings.ner);
  58,57:     this.nlgManager = this.container.get('nlg-manager', this.settings.nlg);
  61,7:       this.settings.action
  65,7:       this.settings.sentiment
  67,58:     this.slotManager = this.container.get('SlotManager', this.settings.slot);
  70,7:       this.settings.context
  72,21:     this.forceNER = this.settings.forceNER;
  105,9:     if (this.settings.nlu) {
  106,35:       const locales = Object.keys(this.settings.nlu);
  109,37:         const domains = Object.keys(this.settings.nlu[locale]);
  112,28:           const settings = this.settings.nlu[locale][domain];
  119,9:     if (this.settings.languages) {
  120,24:       this.addLanguage(this.settings.languages);
  122,9:     if (this.settings.locales) {
  123,24:       this.addLanguage(this.settings.locales);
  125,9:     if (this.settings.calculateSentiment === undefined) {
  126,7:       this.settings.calculateSentiment = true;
  131,9:     if (this.settings.corpora) {
  132,29:       await this.addCorpora(this.settings.corpora);
  138,9:     if (this.settings.autoLoad) {
  139,32:       loaded = await this.load(this.settings.modelFileName);
  472,33:     this.nluManager.addLanguage(this.settings.languages);
  474,9:     if (this.settings.autoSave) {
  475,23:       await this.save(this.settings.modelFileName, true);
  484,19:       settings || this.settings.nlu
  503,46:       settings: this.applySettings(settings, this.settings.ner),
  587,46:       settings: this.applySettings(settings, this.settings.nlu),
  604,50:           settings: this.applySettings(settings, this.settings.nlu),
  617,24:     if (output.score < this.settings.threshold) {
  652,9:     if (this.settings.calculateSentiment) {
  699,22:       settings: { ...this.settings },
  712,24:     this.applySettings(this.settings, json.settings);

/Users/jordicarbonell/workspace/sa/nlp.js/packages/nlu/src/domain-manager.js
  37,24:     this.applySettings(this.settings, settings);
  38,24:     this.applySettings(this.settings, { locale: 'en' });
  39,10:     if (!this.settings.tag) {
  40,7:       this.settings.tag = `domain-manager-${this.settings.locale}`;
  40,45:       this.settings.tag = `domain-manager-${this.settings.locale}`;
  44,7:       this.settings,
  45,39:       this.container.getConfiguration(this.settings.tag)
  53,42:       pipelineTrain: this.getPipeline(`${this.settings.tag}-train`),
  54,44:       pipelineProcess: this.getPipeline(`${this.settings.tag}-process`),
  87,10:     if (!this.settings.nluByDomain) {
  88,7:       this.settings.nluByDomain = {};
  90,28:     const domainSettings = this.settings.nluByDomain[domainName] ||
  91,7:       this.settings.nluByDomain.default || {
  98,19:         { locale: this.settings.locale },
  204,7:       this.settings.trainByDomain ? undefined : defaultDomainName
  247,41:       const options = { useNoneFeature: this.settings.useNoneFeature };
  261,29:       settings: settings || this.settings,
  300,64:     const settings = this.applySettings({ ...input.settings }, this.settings);
  330,27:         input.settings || this.settings
  358,9:         this.settings.trainByDomain) ||
  395,35:             settings: settings || this.settings,
  406,17:       settings: this.settings,
  421,24:     this.applySettings(this.settings, json.settings);

/Users/jordicarbonell/workspace/sa/nlp.js/packages/nlu/src/nlu-manager.js
  37,24:     this.applySettings(this.settings, settings);
  38,10:     if (!this.settings.tag) {
  39,7:       this.settings.tag = 'nlu-manager';
  43,7:       this.settings,
  44,39:       this.container.getConfiguration(this.settings.tag)
  54,9:     if (this.settings.locales) {
  55,24:       this.addLanguage(this.settings.locales);
  58,42:       pipelineTrain: this.getPipeline(`${this.settings.tag}-train`),
  59,44:       pipelineProcess: this.getPipeline(`${this.settings.tag}-process`),
  88,18:               ...this.settings.domain,
  89,31:               useNoneFeature: this.settings.useNoneFeature,
  90,30:               trainByDomain: this.settings.trainByDomain,
  233,46:       settings: this.applySettings(settings, this.settings),
  323,35:             settings: settings || this.settings,
  333,17:       settings: this.settings,
  350,24:     this.applySettings(this.settings, json.settings);

/Users/jordicarbonell/workspace/sa/nlp.js/packages/nlu/src/nlu.js
  36,24:     this.applySettings(this.settings, settings);
  37,24:     this.applySettings(this.settings, { locale: 'en' });
  38,10:     if (!this.settings.tag) {
  39,7:       this.settings.tag = `nlu-${this.settings.locale}`;
  39,34:       this.settings.tag = `nlu-${this.settings.locale}`;
  43,7:       this.settings,
  44,39:       this.container.getConfiguration(this.settings.tag)
  47,44:       pipelinePrepare: this.getPipeline(`${this.settings.tag}-prepare`),
  48,42:       pipelineTrain: this.getPipeline(`${this.settings.tag}-train`),
  49,44:       pipelineProcess: this.getPipeline(`${this.settings.tag}-process`),
  51,38:     this.spellCheck = new SpellCheck(this.settings);
  130,37:     const settings = srcSettings || this.settings;
  133,17:         locale: this.settings.locale,
  172,60:     const settings = this.applySettings(srcSettings || {}, this.settings);
  388,11:         : this.settings.nonedeltaValue;
  392,20:       nonedelta *= this.settings.nonedeltaMultiplier;
  408,46:       settings: this.applySettings(settings, this.settings),
  442,52:       settings: this.applySettings(settings || {}, this.settings),
  469,22:       settings: { ...this.settings },
  480,24:     this.applySettings(this.settings, json.settings);

/Users/jordicarbonell/workspace/sa/nlp.js/packages/nlu-luis/src/nlu-luis.js
  36,7:       this.settings.useStemmer && input.tokens
  39,40:     input.nluAnswer = await request(`${this.settings.luisUrl}${text}`);
  44,23:     return request(`${this.settings.luisUrl}${utterance}`);

/Users/jordicarbonell/workspace/sa/nlp.js/packages/node-nlp/src/nlp/nlp-manager.js
  38,5:     this.settings = settings;
  39,10:     if (!this.settings.container) {
  40,7:       this.settings.container = containerBootstrap();
  42,22:     this.container = this.settings.container;
  52,24:     this.nlp = new Nlp(this.settings);
  54,9:     if (this.settings.ner) {
  55,11:       if (this.settings.ner.ducklingUrl || this.settings.ner.useDuckling) {
  55,44:       if (this.settings.ner.ducklingUrl || this.settings.ner.useDuckling) {
  56,45:         const builtin = new BuiltinDuckling(this.settings.ner);
  59,46:         const builtin = new BuiltinMicrosoft(this.settings.ner);
  63,44:       const builtin = new BuiltinMicrosoft(this.settings.ner);
  102,12:       fn = this.settings.action ? this.settings.action[action] : undefined;
  102,35:       fn = this.settings.action ? this.settings.action[action] : undefined;
  212,9:     if (this.settings.processTransformer) {
  213,14:       return this.settings.processTransformer(result);

/Users/jordicarbonell/workspace/sa/nlp.js/packages/node-nlp/src/nlu/brain-nlu.js
  30,5:     this.settings = settings;
  31,10:     if (!this.settings.container) {
  32,7:       this.settings.container = containerBootstrap();
  34,22:     this.container = this.settings.container;
  36,10:     if (!this.settings.l)
  38,17:         locale: this.settings.locale || this.settings.language || 'en',
  38,41:         locale: this.settings.locale || this.settings.language || 'en',
  54,40:     return this.nlu.train(this.corpus, this.settings);

/Users/jordicarbonell/workspace/sa/nlp.js/packages/node-nlp/src/recognizer/conversation-context.js
  37,5:     this.settings = settings || {};

/Users/jordicarbonell/workspace/sa/nlp.js/packages/node-nlp/src/recognizer/recognizer.js
  36,5:     this.settings = settings || {};
  38,7:       this.settings.nlpManager ||
  40,20:         container: this.settings.container,
  41,27:         ner: { threshold: this.settings.nerThreshold || 1 },
  43,22:     this.threshold = this.settings.threshold || 0.7;
  45,7:       this.settings.conversationContext || new MemoryConversationContext();

/Users/jordicarbonell/workspace/sa/nlp.js/packages/node-nlp/src/sentiment/sentiment-manager.js
  35,5:     this.settings = settings || {};
  74,7:       this.settings

/Users/jordicarbonell/workspace/sa/nlp.js/packages/open-question/src/qa-client.js
  30,5:     this.settings = settings;
  34,37:     const settings = srcSettings || this.settings;

/Users/jordicarbonell/workspace/sa/nlp.js/packages/open-question/src/runtime.js
  30,5:     this.settings = settings;
  46,49:       await tf.node.getMetaGraphsFromSavedModel(this.settings.path)
  48,41:     this.params = Runtime.computeParams(this.settings, modelGraph);

/Users/jordicarbonell/workspace/sa/nlp.js/packages/rest-connector/src/rest-connector.js
  37,9:     if (this.settings.log) {
  47,10:     if (!this.settings.apiTag) {
  48,7:       this.settings.apiTag = '/rest';
  51,19:     server.get(`${this.settings.apiTag}/token`, async (req, res) => {
  52,32:       this.log('debug', `GET ${this.settings.apiTag}/token`);
  68,19:     server.get(`${this.settings.apiTag}/talk`, async (req, res) => {
  69,32:       this.log('debug', `GET ${this.settings.apiTag}/talk`);

/Users/jordicarbonell/workspace/sa/nlp.js/packages/sentiment/src/sentiment-analyzer.js
  35,24:     this.applySettings(this.settings, settings);
  36,10:     if (!this.settings.tag) {
  37,7:       this.settings.tag = 'sentiment-analyzer';
  41,7:       this.settings,
  42,39:       this.container.getConfiguration(this.settings.tag)
  45,44:       pipelinePrepare: this.getPipeline(`${this.settings.tag}-prepare`),
  46,44:       pipelineProcess: this.getPipeline(`${this.settings.tag}-process`),
  55,42:     const pipeline = this.getPipeline(`${this.settings.tag}-prepare`);
  60,31:         settings: settings || this.settings,
  200,52:     input.settings = input.settings || settings || this.settings;

/Users/jordicarbonell/workspace/sa/nlp.js/packages/similarity/src/spell-check.js
  28,5:     this.settings = settings || {};
  29,22:     this.minLength = this.settings.minLength || 4;
  30,9:     if (this.settings.features) {
  31,24:       this.setFeatures(this.settings.features);

/Users/jordicarbonell/workspace/sa/nlp.js/packages/similarity-wa/src/spell-check.js
  28,5:     this.settings = settings || {};
  29,22:     this.minLength = this.settings.minLength || 4;
  30,9:     if (this.settings.features) {
  31,24:       this.setFeatures(this.settings.features);

/Users/jordicarbonell/workspace/sa/nlp.js/packages/utils/src/nlp-analyzer.js
  29,5:     this.settings = settings;
  31,7:       this.settings.threshold === undefined ? 0.5 : this.settings.threshold;
  31,53:       this.settings.threshold === undefined ? 0.5 : this.settings.threshold;