"use strict";(self.webpackChunknlp_docs=self.webpackChunknlp_docs||[]).push([[133],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=l(n),d=o,g=m["".concat(s,".").concat(d)]||m[d]||p[d]||a;return n?r.createElement(g,c(c({ref:t},u),{},{components:n})):r.createElement(g,c({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var l=2;l<a;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},842:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(7294),o=n(9960);function a(e){let{to:t,children:n}=e;return r.createElement(o.Z,{to:`https://github.com/axa-group/nlp.js/blob/master/${t}`},n)}},5897:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>c,metadata:()=>s,toc:()=>u});var r=n(7462),o=(n(7294),n(3905)),a=n(842);const c={},i="Custom actions",s={unversionedId:"bot-orchestration/custom_actions",id:"bot-orchestration/custom_actions",title:"Custom actions",description:"We can define and register custom functions to be executed along the conversation flow like if it were custom",source:"@site/docs/13-bot-orchestration/02-custom_actions.mdx",sourceDirName:"13-bot-orchestration",slug:"/bot-orchestration/custom_actions",permalink:"/bot-orchestration/custom_actions",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"DLG commands reference",permalink:"/bot-orchestration/dlg_commands_reference"},next:{title:"Custom validators",permalink:"/bot-orchestration/custom_validators"}},l={},u=[{value:"Implementing the action",id:"implementing-the-action",level:2},{value:"Registering the custom action",id:"registering-the-custom-action",level:2},{value:"Using the custom action",id:"using-the-custom-action",level:3},{value:"Receiving custom parameters",id:"receiving-custom-parameters",level:3}],p={toc:u};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"custom-actions"},"Custom actions"),(0,o.kt)("p",null,"We can define and register custom functions to be executed along the conversation flow like if it were custom\ncommands. We call them ",(0,o.kt)("em",{parentName:"p"},"custom actions"),"."),(0,o.kt)("p",null,"The process is pretty much the same:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"create the function to be executed"),(0,o.kt)("li",{parentName:"ul"},"register it in the bot"),(0,o.kt)("li",{parentName:"ul"},"use the ",(0,o.kt)("a",{parentName:"li",href:"/bot-orchestration/dlg_commands_reference#call"},(0,o.kt)("em",{parentName:"a"},"call"))," command to run it")),(0,o.kt)("h2",{id:"implementing-the-action"},"Implementing the action"),(0,o.kt)("p",null,"As with custom validators, the function to be executed will receive the following parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"session"),(0,o.kt)("li",{parentName:"ul"},"context"),(0,o.kt)("li",{parentName:"ul"},"params, which will be an object defined by ourselves")),(0,o.kt)("p",null,"Let's create a custom action to place the order:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="actions/placeOrder.js"',title:'"actions/placeOrder.js"'},'const { Logger } = require("@bot-core/commons");\n\nconst logger = Logger.getLogger();\n\nconst placeOrder = async (session, context, params) => {\n  logger.info(`placing order for pizza ${context.pizza}`);\n};\n\nmodule.exports = { placeOrder };\n')),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Note that we're using the ",(0,o.kt)("em",{parentName:"p"},"Logger")," class from ",(0,o.kt)("strong",{parentName:"p"},"@bot-core/commons"),", so you should install that dependency.")),(0,o.kt)("p",null,"For the sake of simplicity, we're just logging in the console a message with the pizza requested by the user."),(0,o.kt)("h2",{id:"registering-the-custom-action"},"Registering the custom action"),(0,o.kt)("p",null,"To register our new action in the bot, we can make use of the method ",(0,o.kt)("em",{parentName:"p"},"registerAction(name, fn)")," of\nthe ",(0,o.kt)(a.Z,{to:"packages/bot/src/bot.js",mdxType:"GithubLink"},"bot")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"{5}","{5}":!0},'const { dockStart } = require("@nlpjs/basic");\nconst { placeOrder } = require("actions/placeOrder.js");\n\n(async () => {\n  const dock = await dockStart();\n  const bot = dock.get("bot");\n  bot.registerAction("placeOrder", placeOrder);\n  ...\n})();\n')),(0,o.kt)("p",null,"As happened with ",(0,o.kt)("em",{parentName:"p"},"custom validators"),", this will register all functions exported in the folder ",(0,o.kt)("em",{parentName:"p"},"actions"),"."),(0,o.kt)("h3",{id:"using-the-custom-action"},"Using the custom action"),(0,o.kt)("p",null,"Now that we have our custom action defined and registered, we can make us of it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"dialog order_pizza\n  say Which pizza would you like?\n  ask pizza\n  [pizza !== undefined] call placeOrder\n")),(0,o.kt)("h3",{id:"receiving-custom-parameters"},"Receiving custom parameters"),(0,o.kt)("p",null,"Custom actions can receive a JSON object as a parameter from the conversation flow.\nTo send a JSON object to your custom action, just add it as the second parameter of the ",(0,o.kt)("em",{parentName:"p"},"call")," command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'  call placeOrder {"discount": 10}\n')),(0,o.kt)("p",null,"This would allow you to get the param from the custom action:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const placeOrder = async (session, context, params) => {\n  ...\n  const { discount } = params;\n  ...\n}\n")))}m.isMDXComponent=!0}}]);