"use strict";(self.webpackChunknlp_docs=self.webpackChunknlp_docs||[]).push([[5173],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=l,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(h,a(a({ref:t},p),{},{components:n})):r.createElement(h,a({ref:t},p))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,a=new Array(i);a[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,a[1]=o;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8288:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=n(7462),l=(n(7294),n(3905));const i={},a="@nlpjs/similarity",o={unversionedId:"nlp/similarity",id:"nlp/similarity",title:"@nlpjs/similarity",description:"Installation",source:"@site/docs/11-nlp/05-similarity.md",sourceDirName:"11-nlp",slug:"/nlp/similarity",permalink:"/nlp/similarity",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Sentiment Analysis",permalink:"/nlp/sentiment-analysis"},next:{title:"Slot filling",permalink:"/nlp/slot-filling"}},s={},c=[{value:"Installation",id:"installation",level:2},{value:"leven",id:"leven",level:2},{value:"similarity",id:"similarity",level:2},{value:"SpellCheck",id:"spellcheck",level:2},{value:"SpellCheck trained with words trained from a text",id:"spellcheck-trained-with-words-trained-from-a-text",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"nlpjssimilarity"},"@nlpjs/similarity"),(0,l.kt)("h2",{id:"installation"},"Installation"),(0,l.kt)("p",null,"You can install @nlpjs/similarity:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"    npm install @nlpjs/similarity\n")),(0,l.kt)("h2",{id:"leven"},"leven"),(0,l.kt)("p",null,"Leven is used to calculate the levenshtein distance between two texts:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'const { leven } = require("@nlpjs/similarity");\n\nconsole.log(leven("potatoe", "potatoe")); // expected: 0\nconsole.log(leven("distance", "eistancd")); // expected: 2\nconsole.log(leven("mikailovitch", "Mikha\xeflovitch")); // expected: 3\n')),(0,l.kt)("h2",{id:"similarity"},"similarity"),(0,l.kt)("p",null,"similarity is used to calculate the levenshtein distance between two texts, but with an option to normalize both texts between calculation."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'const { similarity } = require("@nlpjs/similarity");\n\nfunction showDistances(word1, word2) {\n  console.log(`"${word1}" vs "${word2}" :`);\n  console.log(`    similarity (non normalized): ${similarity(word1, word2)}`);\n  console.log(\n    `        similarity (normalized): ${similarity(word1, word2, true)}`\n  );\n}\n\nshowDistances("potatoe", "potatoe");\nshowDistances("potatoe", "Potatoe");\nshowDistances("distance", "eistancd");\nshowDistances("mikailovitch", "Mikha\xeflovitch");\n')),(0,l.kt)("h2",{id:"spellcheck"},"SpellCheck"),(0,l.kt)("p",null,"SpellCheck can do a spell check based on a dictionary of words with frequency.\nIt searches for the most similar word based on a levenshtein distance. When several words have the same levenshtein distance, the word with more frequency is chosen."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'const { SpellCheck } = require("../../packages/similarity/src");\n// const { SpellCheck } = require(\'@nlpjs/similarity\');\n\nconst spellCheck = new SpellCheck({\n  features: {\n    wording: 1,\n    worming: 4,\n    working: 3,\n  },\n});\nconst actual = spellCheck.check(["worling"], 1);\nconsole.log(actual);\n')),(0,l.kt)("h2",{id:"spellcheck-trained-with-words-trained-from-a-text"},"SpellCheck trained with words trained from a text"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'const fs = require("fs");\nconst { SpellCheck } = require("@nlpjs/similarity");\nconst { NGrams } = require("@nlpjs/utils");\n\n// File book.txt should contain the text that contains the words to be learnt.\n// In the example we used Pride and Prejudice from Project Gutenberg\nconst lines = fs.readFileSync("./data/book.txt", "utf-8").split(/\\r?\\n/);\nconst ngrams = new NGrams({ byWord: true });\nconst freqs = ngrams.getNGramsFreqs(lines, 1);\nconst spellCheck = new SpellCheck({ features: freqs });\nconst actual = spellCheck.check(["knowldge", "thas", "prejudize"]);\nconsole.log(actual);\n')),(0,l.kt)("p",null,"You can find more examples looking directly at ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/axa-group/nlp.js/tree/master/packages/similarity/test"},"tests"),"."))}u.isMDXComponent=!0}}]);