"use strict";(self.webpackChunknlp_docs=self.webpackChunknlp_docs||[]).push([[9045],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=r.createContext({}),u=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=u(n),f=i,d=m["".concat(o,".").concat(f)]||m[f]||p[f]||s;return n?r.createElement(d,a(a({ref:t},c),{},{components:n})):r.createElement(d,a({ref:t},c))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,a=new Array(s);a[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var u=2;u<s;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7040:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>u});var r=n(7462),i=(n(7294),n(3905));const s={},a="File System",l={unversionedId:"special_packages/core/utilities/file-system",id:"special_packages/core/utilities/file-system",title:"File System",description:"Introduction",source:"@site/docs/90-special_packages/01-core/02-utilities/file-system.md",sourceDirName:"90-special_packages/01-core/02-utilities",slug:"/special_packages/core/utilities/file-system",permalink:"/special_packages/core/utilities/file-system",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ArrToObj",permalink:"/special_packages/core/utilities/arr-to-obj"},next:{title:"logger",permalink:"/special_packages/core/utilities/logger"}},o={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Mock File System",id:"mock-file-system",level:2},{value:"Request File System",id:"request-file-system",level:2},{value:"Request RN File System",id:"request-rn-file-system",level:2}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"file-system"},"File System"),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"To be able to work with files, a File System should be defined. A file system should include these methods:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"readFile(fileName): returns a promise to read the file."),(0,i.kt)("li",{parentName:"ul"},"readFileSync(fileName): synchronous method to read a file."),(0,i.kt)("li",{parentName:"ul"},"writeFile(fileName, data, format): returns a promise to write the data into the file."),(0,i.kt)("li",{parentName:"ul"},"existsSync(fileName): synchronous method to check if a file exists."),(0,i.kt)("li",{parentName:"ul"},"lstatSync(fileName): synchronous method to get the stats of a file, used to check if a path is a directory or a file.")),(0,i.kt)("p",null,"By default, a mock file system plugin is mounted."),(0,i.kt)("h2",{id:"mock-file-system"},"Mock File System"),(0,i.kt)("p",null,"The default plugin is mounted at the core."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"readFile: returns a Promise that resolve to undefined."),(0,i.kt)("li",{parentName:"ul"},"writeFile: returns a Promise that resolve to an Error."),(0,i.kt)("li",{parentName:"ul"},"existsSync: returns false"),(0,i.kt)("li",{parentName:"ul"},"lstatSync: returns undefined"),(0,i.kt)("li",{parentName:"ul"},"readFileSync: returns undefined")),(0,i.kt)("h2",{id:"request-file-system"},"Request File System"),(0,i.kt)("p",null,"This is the plugin mounted by the core-loader, as it's the one that fits the use at backend. It allows to read files from the OS or if you provide an URL it will load them using a request."),(0,i.kt)("p",null,"This plugin is automatically mounted when you use @nlpjs/core-loader."),(0,i.kt)("p",null,"If you want to use this plugin on your own, then install it with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @nlpjs/request\n")),(0,i.kt)("p",null,"And to use the plugin in your container, register it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const { Container } = require('@nlpjs/core');\nconst { fs: requestfs } = require('@nlpjs/request');\n\n\nasync function main() {\n  const container = new Container();\n  container.register('fs', requestfs);\n  const fs = container.get('fs');\n  const readme = await fs.readFile('https://raw.githubusercontent.com/axa-group/nlp.js/master/README.md');\n  console.log(readme); // will return the content of the README.md\n}\n\nmain();\n")),(0,i.kt)("p",null,"If the resolved data from the URL is a valid JSON object, then it will be returned as an object, otherwise a string containing the content will be returned."),(0,i.kt)("p",null,"Also you can load files from the file system:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const { Container } = require('@nlpjs/core');\nconst { fs: requestfs } = require('@nlpjs/request');\n\n\nasync function main() {\n  const container = new Container();\n  container.register('fs', requestfs);\n  const fs = container.get('fs');\n  const readme = await fs.readFile('./index.js');\n  console.log(readme); // will return the content of the index.js file\n}\n\nmain();\n")),(0,i.kt)("h2",{id:"request-rn-file-system"},"Request RN File System"),(0,i.kt)("p",null,"This is the file system for Web and React Native, where no OS file system can be accessed, but we can still load from URLs.\nIf you want to use this plugin on your own, then install it with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @nlpjs/request-rn\n")),(0,i.kt)("p",null,"And to use the plugin in your container, register it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const { Container } = require('@nlpjs/core');\nconst { fs: requestfs } = require('@nlpjs/request-rn');\n\n\nasync function main() {\n  const container = new Container();\n  container.register('fs', requestfs);\n  const fs = container.get('fs');\n  const readme = await fs.readFile('https://raw.githubusercontent.com/axa-group/nlp.js/master/README.md');\n  console.log(readme); // will return the content of the README.md\n}\n\nmain();\n")))}p.isMDXComponent=!0}}]);