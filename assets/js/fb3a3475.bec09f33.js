"use strict";(self.webpackChunknlp_docs=self.webpackChunknlp_docs||[]).push([[525],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=s(n),h=o,d=m["".concat(u,".").concat(h)]||m[h]||c[h]||a;return n?r.createElement(d,i(i({ref:t},p),{},{components:n})):r.createElement(d,i({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6834:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=n(7462),o=(n(7294),n(3905));const a={},i="NeuralNetwork",l={unversionedId:"neural",id:"neural",title:"NeuralNetwork",description:"Introduction",source:"@site/docs/06-neural.md",sourceDirName:".",slug:"/neural",permalink:"/neural",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"@nlpjs/builtin-compromise",permalink:"/browser/builtin-compromise"},next:{title:"@nlpjs/nlu",permalink:"/nlu/nlu"}},u={},s=[{value:"Introduction",id:"introduction",level:2},{value:"Installing",id:"installing",level:2},{value:"Corpus Format",id:"corpus-format",level:2},{value:"Example of use",id:"example-of-use",level:2},{value:"Exporting trained model to JSON and importing",id:"exporting-trained-model-to-json-and-importing",level:2},{value:"Options",id:"options",level:2}],p={toc:s};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"neuralnetwork"},"NeuralNetwork"),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"NeuralNetwork")," is the class for an NLU Neural Network, able to train a classifier and then classify into intents."),(0,o.kt)("h2",{id:"installing"},"Installing"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"NeuralNetwork")," is a class of the package ",(0,o.kt)("em",{parentName:"p"},"@nlpjs/neural"),", that you can install via NPM:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"  npm install @nlpjs/neural\n")),(0,o.kt)("h2",{id:"corpus-format"},"Corpus Format"),(0,o.kt)("p",null,"To train the classifier you need a corpus. The corpus format is an array of objects where each object contains an input and output, where the input is an object with the features and the output is an object for the intent:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "input": { "who": 1, "are": 1, "you": 1 },\n    "output": { "who": 1 }\n  },\n  {\n    "input": { "say": 1, "about": 1, "you": 1 },\n    "output": { "who": 1 }\n  },\n  {\n    "input": { "why": 1, "are": 1, "you": 1, "here": 1 },\n    "output": { "who": 1 }\n  },\n  {\n    "input": { "who": 1, "developed": 1, "you": 1 },\n    "output": { "developer": 1 }\n  },\n  {\n    "input": { "who": 1, "is": 1, "your": 1, "developer": 1 },\n    "output": { "developer": 1 }\n  },\n  {\n    "input": { "who": 1, "do": 1, "you": 1, "work": 1, "for": 1 },\n    "output": { "developer": 1 }\n  },\n  {\n    "input": { "when": 1, "is": 1, "your": 1, "birthday": 1 },\n    "output": { "birthday": 1 }\n  },\n  {\n    "input": { "when": 1, "were": 1, "you": 1, "born": 1 },\n    "output": { "birthday": 1 }\n  },\n  {\n    "input": { "date": 1, "of": 1, "your": 1, "birthday": 1 },\n    "output": { "birthday": 1 }\n  }\n]\n')),(0,o.kt)("h2",{id:"example-of-use"},"Example of use"),(0,o.kt)("p",null,"The file ",(0,o.kt)("em",{parentName:"p"},"corpus.json"),' should contain the corpus shown in the Corpus Format section of this example.\nThis will train the corpus and run the input equivalent to the sentence "when birthday".\nThe result is a list of all intents with the score for each intent.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const { NeuralNetwork } = require('@nlpjs/neural');\nconst corpus = require('./corpus.json');\n\nconst net = new NeuralNetwork();\nnet.train(corpus);\nconsole.log(net.run({ when: 1, birthday: 1 }));\n// { who: 0, developer: 0, birthday: 0.7975805386427789 }\n")),(0,o.kt)("h2",{id:"exporting-trained-model-to-json-and-importing"},"Exporting trained model to JSON and importing"),(0,o.kt)("p",null,"You can export the model to a json with the ",(0,o.kt)("em",{parentName:"p"},"toJSON")," method, and import a model from a json with ",(0,o.kt)("em",{parentName:"p"},"fromJSON")," method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const { NeuralNetwork } = require('@nlpjs/neural');\nconst corpus = require('./corpus.json');\n\nlet net = new NeuralNetwork();\nnet.train(corpus);\nconst exported = net.toJSON();\nnet = new NeuralNetwork();\nnet.fromJSON(exported);\nconsole.log(net.run({ when: 1, birthday: 1 }));\n")),(0,o.kt)("h2",{id:"options"},"Options"),(0,o.kt)("p",null,"There are several options that you can customize:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"iterations"),": maximum number of iterations (epochs) that the neural network can run. By default this is 20000."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"errorThresh"),": minimum error threshold, if the loss is lower than this number, then the training ends. By default this is 0.00005."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"deltaErrorThresh"),": minimum delta error threshold, this is the difference between the current error and the last error. If the delta error threshold is lower than this number, then the training ends. By default this is 0.000001."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"learningRate"),": learning rate for the neural network. By default this is 0.6."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"momentum"),": momentum for the gradient descent optimization. By default this is 0.5."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"alpha"),": Multiplicator or alpha factor for the ReLu activation function. By default this is 0.07."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"log"),": If is ",(0,o.kt)("em",{parentName:"li"},"false")," then no log happens, if is ",(0,o.kt)("em",{parentName:"li"},"true")," then details are logged in console. You can also provide a function, and it will receive two parameters: the status and the elapsed time of the last epoch. By default this is false.")),(0,o.kt)("p",null,"Example of how to provide parameters:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const { NeuralNetwork } = require('@nlpjs/neural');\nconst corpus = require('./corpus.json');\n\nconst net = new NeuralNetwork({ learningRate: 0.01, log: true });\nnet.train(corpus);\nconsole.log(net.run({ when: 1, birthday: 1 }));\n// Epoch 2382 loss 0.0013668740975184709 time 0ms\n// { who: 0, developer: 0, birthday: 0.8050273840765896 }\n")))}c.isMDXComponent=!0}}]);