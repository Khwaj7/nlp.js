"use strict";(self.webpackChunknlp_docs=self.webpackChunknlp_docs||[]).push([[6706],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(a),m=r,g=u["".concat(l,".").concat(m)]||u[m]||p[m]||o;return a?n.createElement(g,i(i({ref:t},d),{},{components:a})):n.createElement(g,i({ref:t},d))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},842:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(7294),r=a(9960);function o(e){let{to:t,children:a}=e;return n.createElement(r.Z,{to:`https://github.com/axa-group/nlp.js/blob/master/${t}`},a)}},9860:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var n=a(7462),r=(a(7294),a(3905)),o=a(842);const i={},s="The Database class",l={unversionedId:"persistence/database",id:"persistence/database",title:"The Database class",description:"Introduction",source:"@site/docs/09-persistence/01-database.md",sourceDirName:"09-persistence",slug:"/persistence/database",permalink:"/persistence/database",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Integration with Duckling",permalink:"/ner/builtin-duckling"},next:{title:"NLP Manager",permalink:"/nlp/nlp-manager"}},c={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Registering the Database component",id:"registering-the-database-component",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Using multiple adapters",id:"using-multiple-adapters",level:2},{value:"Creating a custom adapter",id:"creating-a-custom-adapter",level:2},{value:"Out of the box adapters",id:"out-of-the-box-adapters",level:2},{value:"MemoryDBAdapter",id:"memorydbadapter",level:3},{value:"MongoDBAdapter",id:"mongodbadapter",level:3}],p={toc:d};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"the-database-class"},"The Database class"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"The Database class allows you to add a persistence layer in your bot. Basically, it's a database component where you can register adapaters and collections."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"An adapter is a class to talk with one database engine"),(0,r.kt)("li",{parentName:"ul"},"A collection is a named table in the database, and each collection can be set up to have an adapter. That means that you can set the database to use different database engines for different collections.")),(0,r.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const { dockStart } = require("@nlpjs/basic");\nconst { Database } = require("@nlpjs/database");\n\n(async () => {\n  const dock = await dockStart();\n  dock.getContainer().use(Database);\n  const database = dock.get("database");\n  await database.connect();\n  const collection = database.getCollection("items");\n  const items = [];\n  for (let i = 0; i < 100; i += 1) {\n    const item = { num: i, mod: i % 10 };\n    items.push(item);\n  }\n  await collection.insertMany(items);\n  const actual = await collection.find({ mod: 3 });\n  await database.disconnect();\n  console.log(actual);\n})();\n')),(0,r.kt)("h2",{id:"registering-the-database-component"},"Registering the Database component"),(0,r.kt)("p",null,"As usual, you can either register the database component programmatically, as in the example above:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const dock = await dockStart();\ndock.getContainer().use(Database);\n")),(0,r.kt)("p",null,"or using the configuration object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "settings": {\n    //your settings\n  },\n  "use": [\n    //some other plugins\n    "database"\n  ]\n}\n')),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"/configuration#database"},"configuration")," section for more details on how to configure the Database component."),(0,r.kt)("h2",{id:"using-multiple-adapters"},"Using multiple adapters"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Database")," allows you to register any number of adapters. By default a ",(0,r.kt)(o.Z,{to:"packages/database/src/memory-adapter.js",mdxType:"GithubLink"},"MemorydbAdapter"),"\nwill be registered as the default adapter. This means that any collection whose adapter has not been explicitly defined, will use the default adapter.\nTo register additional adapters use the method ",(0,r.kt)("em",{parentName:"p"},"registerAdapter"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const database = dock.get("database");\ndatabase.registerAdapter("fancyDB", new MyFancyDBAdapter());\n')),(0,r.kt)("p",null,"Once you have your additional adapter registered, you can get some collections to exist in one of the registered adapters:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'database.registerCollection("myFancyDBCollection", "fancyDB");\n')),(0,r.kt)("p",null,"Then, when operating in a collection the adapter will automatically choose the proper adapter for that collections:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"//look for an element in the myFancyDBCollection will use the adapter registered as 'fancyDB'\ndatabase.findById(\"myFancyDBCollection\", 1);\n//as no adapter has been registered for collection 'randomCollection', MemorydbAdapter will be used\ndatabase.findById(\"randomCollection\", 1);\n")),(0,r.kt)("h2",{id:"creating-a-custom-adapter"},"Creating a custom adapter"),(0,r.kt)("p",null,"When using an adapter, ",(0,r.kt)("em",{parentName:"p"},"Database")," will delegate the operation to the proper adapter. For instance:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"findById(name, id) {\n  //retrieve the adapter associated to that collections, and delegate the execution to it\n  return this.getAdapter(name).findById(name, id);\n}\n")),(0,r.kt)("p",null,"So, at the end of the day, you'll just need to create an object implementing the proper methods you'll find in\nthe ",(0,r.kt)(o.Z,{to:"packages/database/src/database.js",mdxType:"GithubLink"},"Database")," class."),(0,r.kt)("h2",{id:"out-of-the-box-adapters"},"Out of the box adapters"),(0,r.kt)("h3",{id:"memorydbadapter"},"MemoryDBAdapter"),(0,r.kt)("p",null,"The ",(0,r.kt)(o.Z,{to:"packages/database/src/memory-adapter.js",mdxType:"GithubLink"},"MemorydbAdapter")," uses JSON structures\nto emulate an in-memory database. If needed, it can be set to persist those JSON structures into file system.\nCheck ",(0,r.kt)("a",{parentName:"p",href:"/configuration#memory-adapter"},"here")," for available configuration options."),(0,r.kt)("h3",{id:"mongodbadapter"},"MongoDBAdapter"),(0,r.kt)("p",null,"The ",(0,r.kt)(o.Z,{to:"packages/mongodb-adapter/src/mongodb-adapter.js",mdxType:"GithubLink"},"MongodbAdapter")," allows\nyou to use any MongoDB compliant database as your persistence layer.\nCheck ",(0,r.kt)("a",{parentName:"p",href:"/configuration#mongodb-adapter"},"here")," for available configuration options."))}u.isMDXComponent=!0}}]);