"use strict";(self.webpackChunknlp_docs=self.webpackChunknlp_docs||[]).push([[1409],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=o.createContext({}),l=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=l(e.components);return o.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(n),d=r,h=p["".concat(i,".").concat(d)]||p[d]||m[d]||s;return n?o.createElement(h,a(a({ref:t},u),{},{components:n})):o.createElement(h,a({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,a=new Array(s);a[0]=p;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var l=2;l<s;l++)a[l]=n[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},842:(e,t,n)=>{n.d(t,{Z:()=>s});var o=n(7294),r=n(9960);function s(e){let{to:t,children:n}=e;return o.createElement(r.Z,{to:`https://github.com/axa-group/nlp.js/blob/master/${t}`},n)}},4973:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var o=n(7462),r=(n(7294),n(3905)),s=n(842);const a={toc_max_heading_level:4},c="Custom connectors",i={unversionedId:"Connectors/custom_connectors",id:"Connectors/custom_connectors",title:"Custom connectors",description:"In case the out of the box connectors do not fit your use case, you can implement your own custom connector.",source:"@site/docs/04-Connectors/14-custom_connectors.mdx",sourceDirName:"04-Connectors",slug:"/Connectors/custom_connectors",permalink:"/Connectors/custom_connectors",draft:!1,tags:[],version:"current",sidebarPosition:14,frontMatter:{toc_max_heading_level:4},sidebar:"tutorialSidebar",previous:{title:"REST connector",permalink:"/Connectors/rest-connector"},next:{title:"Web and React Native",permalink:"/browser/webandreact"}},l={},u=[{value:"Implementing your custom connector",id:"implementing-your-custom-connector",level:2},{value:"Methods",id:"methods",level:3},{value:"<em>registerDefault</em> method",id:"registerdefault-method",level:4},{value:"<em>initialize</em> method",id:"initialize-method",level:4},{value:"<em>start</em> method",id:"start-method",level:4},{value:"<em>say</em> method",id:"say-method",level:4},{value:"<em>close</em> method",id:"close-method",level:4},{value:"Registering your connector",id:"registering-your-connector",level:2}],m={toc:u};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"custom-connectors"},"Custom connectors"),(0,r.kt)("p",null,"In case the out of the box connectors do not fit your use case, you can implement your own custom connector."),(0,r.kt)("h2",{id:"implementing-your-custom-connector"},"Implementing your custom connector"),(0,r.kt)("p",null,"If your connector is REST-based, an easy point to start is by extending\nthe ",(0,r.kt)(s.Z,{to:"packages/rest-connector/src/rest-connector.js",mdxType:"GithubLink"},"RestConnector "),".\nThen you might want to implement the following methods:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"registerDefault"),(0,r.kt)("li",{parentName:"ul"},"initialize"),(0,r.kt)("li",{parentName:"ul"},"start"),(0,r.kt)("li",{parentName:"ul"},"say"),(0,r.kt)("li",{parentName:"ul"},"close")),(0,r.kt)("h3",{id:"methods"},"Methods"),(0,r.kt)("h4",{id:"registerdefault-method"},(0,r.kt)("em",{parentName:"h4"},"registerDefault")," method"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"TODO")),(0,r.kt)("h4",{id:"initialize-method"},(0,r.kt)("em",{parentName:"h4"},"initialize")," method"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"TODO")),(0,r.kt)("h4",{id:"start-method"},(0,r.kt)("em",{parentName:"h4"},"start")," method"),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"start")," method would include all your initialization code. At least, you might want\nto register the connector endpoints, and, at least one of them, will be in charge of\nprocessing the messages sent by the user.\nBelow you can find an excerpt of how you would send the received message to the bot\nfor processing."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"start() {\n  logger.debug('starting rest connector!');\n  const server = this.container.get('api-server').app;\n  if (!server) {\n    throw new Error('No api-server found');\n\n  server.post('/api/process_user_message/', async (req, res) => {\n    // do some setup\n    ...\n\n    //extract the activity from the request\n    const activity = getActivity(req);\n\n    //let the bot process the request\n    const bot = this.container.get('bot');\n    if (bot) {\n      const session = this.createSession(activity);\n      await bot.process(session);\n    }\n    ...\n  }\n  ...\n}\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"when creating a REST-based custom connector try not to hardcode the base path of your endpoints. Using\na setting, such as the ",(0,r.kt)("inlineCode",{parentName:"p"},"apiPath")," used by the REST connector, would avoid collisions when using multiple\nconnectors in the same bot.",(0,r.kt)("br",null),"\nAlso, using the container name as the root path, as the ",(0,r.kt)(s.Z,{to:"packages/msbf-connector/src/msbf-connector.js",mdxType:"GithubLink"},"MSBF connector"),"\ndoes, would be a good idea.")),(0,r.kt)("h4",{id:"say-method"},(0,r.kt)("em",{parentName:"h4"},"say")," method"),(0,r.kt)("p",null,"Finally, the ",(0,r.kt)("em",{parentName:"p"},"say")," method will be used to send output to the user, here, you would have your\nimplementation of how to send messages to the user, how to send cards, etc. The different\ntypes of output of you connector will very depend on the specifications of your connector."),(0,r.kt)("h4",{id:"close-method"},(0,r.kt)("em",{parentName:"h4"},"close")," method"),(0,r.kt)("p",null,"Use this method to do any cleanup your connector needs to do when the bot is teared down."),(0,r.kt)("h2",{id:"registering-your-connector"},"Registering your connector"),(0,r.kt)("p",null,"As usual, we'll need to register our custom connector programmatically:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// add your new custom connector\nconf.use.push({\n  className: <name used to export your connector class>,\n  path: <path to your custom connector>,\n});\n")),(0,r.kt)("p",null,"or through configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "settings":{\n    ...\n  },\n  "use":[\n    {\n      "className": <name used to export your connector class>,\n      "path": <path to your custom connector>,\n    }\n  ]\n}\n')))}p.isMDXComponent=!0}}]);