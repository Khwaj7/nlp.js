"use strict";(self.webpackChunknlp_docs=self.webpackChunknlp_docs||[]).push([[486],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=p(n),d=a,g=c["".concat(l,".").concat(d)]||c[d]||u[d]||r;return n?o.createElement(g,s(s({ref:t},m),{},{components:n})):o.createElement(g,s({ref:t},m))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=c;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var p=2;p<r;p++)s[p]=n[p];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9874:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var o=n(7462),a=(n(7294),n(3905));const r={},s="@nlpjs/lang-it",i={unversionedId:"language_support/modules/lang-it",id:"language_support/modules/lang-it",title:"@nlpjs/lang-it",description:"Installation",source:"@site/docs/03-language_support/02-modules/lang-it.md",sourceDirName:"03-language_support/02-modules",slug:"/language_support/modules/lang-it",permalink:"/language_support/modules/lang-it",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"@nlpjs/lang-id",permalink:"/language_support/modules/lang-id"},next:{title:"Language Guesser",permalink:"/language_support/language_guesser"}},l={},p=[{value:"Installation",id:"installation",level:2},{value:"Normalization",id:"normalization",level:2},{value:"Tokenization",id:"tokenization",level:2},{value:"Identify if a word is an italian stopword",id:"identify-if-a-word-is-an-italian-stopword",level:2},{value:"Remove stopwords from an array of words",id:"remove-stopwords-from-an-array-of-words",level:2},{value:"Change the stopwords dictionary",id:"change-the-stopwords-dictionary",level:2},{value:"Stemming word by word",id:"stemming-word-by-word",level:2},{value:"Stemming an array of words",id:"stemming-an-array-of-words",level:2},{value:"Normalizing, Tokenizing and Stemming a sentence",id:"normalizing-tokenizing-and-stemming-a-sentence",level:2},{value:"Remove stopwords when stemming a sentence",id:"remove-stopwords-when-stemming-a-sentence",level:2},{value:"Sentiment Analysis",id:"sentiment-analysis",level:2},{value:"Example of usage on a classifier",id:"example-of-usage-on-a-classifier",level:2}],m={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"nlpjslang-it"},"@nlpjs/lang-it"),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("p",null,"You can install @nlpjs/lang-it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"    npm install @nlpjs/lang-it\n")),(0,a.kt)("h2",{id:"normalization"},"Normalization"),(0,a.kt)("p",null,"Normalization of a text converts it to lowercase and remove decorations of characters."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const { NormalizerIt } = require("@nlpjs/lang-it");\n\nconst normalizer = new NormalizerIt();\nconst input = "Questo d\xf2vrebbe essere normalizzato";\nconst result = normalizer.normalize(input);\nconsole.log(result);\n// output: questo dovrebbe essere normalizzato\n')),(0,a.kt)("h2",{id:"tokenization"},"Tokenization"),(0,a.kt)("p",null,"Tokenization splits a sentence into words."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const { TokenizerIt } = require(\"@nlpjs/lang-it\");\n\nconst tokenizer = new TokenizerIt();\nconst input = \"Questo dovrebbe essere tokenizzato\";\nconst result = tokenizer.tokenize(input);\nconsole.log(result);\n// output: [ 'Questo', 'dovrebbe', 'essere', 'tokenizzato' ]\n")),(0,a.kt)("p",null,"Tokenizer can also normalize the sentence before tokenizing, to do that provide a ",(0,a.kt)("em",{parentName:"p"},"true")," as second argument to the method ",(0,a.kt)("em",{parentName:"p"},"tokenize")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const { TokenizerIt } = require(\"@nlpjs/lang-it\");\n\nconst tokenizer = new TokenizerIt();\nconst input = \"Questo dovrebbe essere tokenizzato\";\nconst result = tokenizer.tokenize(input, true);\nconsole.log(result);\n// output: [ 'questo', 'dovrebbe', 'essere', 'tokenizzato' ]\n")),(0,a.kt)("h2",{id:"identify-if-a-word-is-an-italian-stopword"},"Identify if a word is an italian stopword"),(0,a.kt)("p",null,"Using the class ",(0,a.kt)("em",{parentName:"p"},"StopwordsIt")," you can identify if a word is an stopword:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const { StopwordsIt } = require("@nlpjs/lang-it");\n\nconst stopwords = new StopwordsIt();\nconsole.log(stopwords.isStopword("uno"));\n// output: true\nconsole.log(stopwords.isStopword("sviluppatore"));\n// output: false\n')),(0,a.kt)("h2",{id:"remove-stopwords-from-an-array-of-words"},"Remove stopwords from an array of words"),(0,a.kt)("p",null,"Using the class ",(0,a.kt)("em",{parentName:"p"},"StopwordsIt")," you can remove stopwords form an array of words:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const { StopwordsIt } = require("@nlpjs/lang-it");\n\nconst stopwords = new StopwordsIt();\nconsole.log(stopwords.removeStopwords(["ho", "visto", "uno", "sviluppatore"]));\n// output: [ \'visto\', \'sviluppatore\' ]\n')),(0,a.kt)("h2",{id:"change-the-stopwords-dictionary"},"Change the stopwords dictionary"),(0,a.kt)("p",null,"Using the class ",(0,a.kt)("em",{parentName:"p"},"StopwordsIt")," you can restart it dictionary and build it from another set of words:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const { StopwordsIt } = require("@nlpjs/lang-it");\n\nconst stopwords = new StopwordsIt();\nstopwords.dictionary = {};\nstopwords.build(["ho", "visto"]);\nconsole.log(stopwords.removeStopwords(["ho", "visto", "uno", "sviluppatore"]));\n// output: [ \'uno\', \'sviluppatore\' ]\n')),(0,a.kt)("h2",{id:"stemming-word-by-word"},"Stemming word by word"),(0,a.kt)("p",null,"An stemmer is an algorithm to calculate the ",(0,a.kt)("em",{parentName:"p"},"stem")," (root) of a word, removing affixes."),(0,a.kt)("p",null,"You can stem one word using method ",(0,a.kt)("em",{parentName:"p"},"stemWord"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const { StemmerIt } = require("@nlpjs/lang-it");\n\nconst stemmer = new StemmerIt();\nconst input = "svilupp";\nconsole.log(stemmer.stemWord(input));\n// output: program\n')),(0,a.kt)("h2",{id:"stemming-an-array-of-words"},"Stemming an array of words"),(0,a.kt)("p",null,"You can stem an array of words using method ",(0,a.kt)("em",{parentName:"p"},"stem"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const { StemmerIt } = require("@nlpjs/lang-it");\n\nconst stemmer = new StemmerIt();\nconst input = ["ho", "visto", "uno", "sviluppatore"];\nconsole.log(stemmer.stem(input));\n// outuput: [ \'ho\', \'vist\', \'uno\', \'svilupp\' ]\n')),(0,a.kt)("h2",{id:"normalizing-tokenizing-and-stemming-a-sentence"},"Normalizing, Tokenizing and Stemming a sentence"),(0,a.kt)("p",null,"As you can see, stemmer does not do internal normalization, so words with uppercases will remain uppercased.\nAlso, stemmer works with lowercased affixes, so ",(0,a.kt)("em",{parentName:"p"},"sviluppatore")," will be stemmed as ",(0,a.kt)("em",{parentName:"p"},"svilupp")," but ",(0,a.kt)("em",{parentName:"p"},"SVILUPPATORE")," will not be changed."),(0,a.kt)("p",null,"You can tokenize and stem a sentence, including normalization, with the method ",(0,a.kt)("em",{parentName:"p"},"tokenizeAndStem"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const { StemmerIt } = require(\"@nlpjs/lang-it\");\n\nconst stemmer = new StemmerIt();\nconst input = \"Ho visto uno SVILUPPATORE\";\nconsole.log(stemmer.tokenizeAndStem(input));\n// output: [ 'ho', 'vist', 'uno', 'svilupp' ]\n")),(0,a.kt)("h2",{id:"remove-stopwords-when-stemming-a-sentence"},"Remove stopwords when stemming a sentence"),(0,a.kt)("p",null,"When calling ",(0,a.kt)("em",{parentName:"p"},"tokenizeAndStem")," method from the class ",(0,a.kt)("em",{parentName:"p"},"StemmerIt"),", the second parameter is a boolean to set if the stemmer must keep the stopwords (true) or remove them (false). Before using it, the stopwords instance must be set into the stemmer:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const { StemmerIt, StopwordsIt } = require(\"@nlpjs/lang-it\");\n\nconst stemmer = new StemmerIt();\nstemmer.stopwords = new StopwordsIt();\nconst input = \"Ho visto uno sviluppatore\";\nconsole.log(stemmer.tokenizeAndStem(input, false));\n// output: [ 'vist', 'svilupp' ]\n")),(0,a.kt)("h2",{id:"sentiment-analysis"},"Sentiment Analysis"),(0,a.kt)("p",null,"To use sentiment analysis you'll need to create a new ",(0,a.kt)("em",{parentName:"p"},"Container")," and use the plugin ",(0,a.kt)("em",{parentName:"p"},"LangIt"),", because internally the ",(0,a.kt)("em",{parentName:"p"},"SentimentAnalyzer")," class try to retrieve the normalizer, tokenizer, stemmmer and sentiment dictionaries from the container."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const { Container } = require("@nlpjs/core");\nconst { SentimentAnalyzer } = require("@nlpjs/sentiment");\nconst { LangIt } = require("@nlpjs/lang-it");\n\n(async () => {\n  const container = new Container();\n  container.use(LangIt);\n  const sentiment = new SentimentAnalyzer({ container });\n  const result = await sentiment.process({\n    locale: "it",\n    text: "amore per i gatti",\n  });\n  console.log(result.sentiment);\n})();\n// output:\n// {\n//   score: 0.25,\n//   numWords: 4,\n//   numHits: 2,\n//   average: 0.0625,\n//   type: \'pattern\',\n//   locale: \'it\',\n//   vote: \'positive\'\n// }\n')),(0,a.kt)("p",null,"The output of the sentiment analysis includes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"score"),": final score of the sentence."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"numWords"),": total words of the sentence."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"numHits"),": total words of the sentence identified as having a sentiment score."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"average"),": score divided by numWords"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"type"),": type of dictionary used, values can be afinn, senticon or pattern."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"locale"),": locale of the sentence"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"vote"),": positive if score greater than 0, negative if score lower than 0, neutral if score equals 0.")),(0,a.kt)("h2",{id:"example-of-usage-on-a-classifier"},"Example of usage on a classifier"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const { containerBootstrap } = require("@nlpjs/core");\nconst { Nlp } = require("@nlpjs/nlp");\nconst { LangIt } = require("@nlpjs/lang-it");\n\n(async () => {\n  const container = await containerBootstrap();\n  container.use(Nlp);\n  container.use(LangIt);\n  const nlp = container.get("nlp");\n  nlp.settings.autoSave = false;\n  nlp.addLanguage("it");\n  // Adds the utterances and intents for the NLP\n  nlp.addDocument("it", "Addio per ora", "greetings.bye");\n  nlp.addDocument("it", "arrivederci e stai attento", "greetings.bye");\n  nlp.addDocument("it", "molto bene a dopo", "greetings.bye");\n  nlp.addDocument("it", "devo andare", "greetings.bye");\n  nlp.addDocument("it", "ciao", "greetings.hello");\n\n  // Train also the NLG\n  nlp.addAnswer("it", "greetings.bye", "fino alla prossima volta");\n  nlp.addAnswer("it", "greetings.bye", "A presto!");\n  nlp.addAnswer("it", "greetings.hello", "Ciao, come stai");\n  nlp.addAnswer("it", "greetings.hello", "Saluti!");\n  await nlp.train();\n  const response = await nlp.process("it", "devo andare");\n  console.log(response);\n})();\n')))}u.isMDXComponent=!0}}]);