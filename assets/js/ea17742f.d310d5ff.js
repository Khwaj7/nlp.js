"use strict";(self.webpackChunknlp_docs=self.webpackChunknlp_docs||[]).push([[5905],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,m=u["".concat(l,".").concat(d)]||u[d]||h[d]||o;return n?r.createElement(m,s(s({ref:t},p),{},{components:n})):r.createElement(m,s({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4169:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={},s="NER Quick Start",i={unversionedId:"ner/ner-quickstart",id:"ner/ner-quickstart",title:"NER Quick Start",description:"Install the needed packages",source:"@site/docs/08-ner/01-ner-quickstart.md",sourceDirName:"08-ner",slug:"/ner/ner-quickstart",permalink:"/ner/ner-quickstart",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Logistic Regression NLU",permalink:"/nlu/logistic-regression-nlu"},next:{title:"Builtin Entity Extraction",permalink:"/ner/builtin-entity-extraction"}},l={},c=[{value:"Install the needed packages",id:"install-the-needed-packages",level:2},{value:"Create the conf.json",id:"create-the-confjson",level:2},{value:"Create the corpus.json",id:"create-the-corpusjson",level:2},{value:"Create the heros.json",id:"create-the-herosjson",level:2},{value:"Create the index.js",id:"create-the-indexjs",level:2},{value:"Start the application",id:"start-the-application",level:2},{value:"Stored context",id:"stored-context",level:2}],p={toc:c};function h(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"ner-quick-start"},"NER Quick Start"),(0,a.kt)("h2",{id:"install-the-needed-packages"},"Install the needed packages"),(0,a.kt)("p",null,"In your node project folder, install the @nlpjs/basic, @nlpjs/express-api-server and @nlpjs/directline-connector packages."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @nlpjs/basic @nlpjs/express-api-server @nlpjs/directline-connector\n")),(0,a.kt)("h2",{id:"create-the-confjson"},"Create the conf.json"),(0,a.kt)("p",null,"Create the file ",(0,a.kt)("em",{parentName:"p"},"conf.json")," with this content:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "settings": {\n    "nlp": {\n      "corpora": ["./corpus.json"]\n    },\n    "api-server": {\n      "port": 3000,\n      "serveBot": true      \n    }\n  },\n  "use": ["Basic", "LangEn", "ExpressApiServer", "DirectlineConnector"]\n}\n')),(0,a.kt)("p",null,"You are telling the applicaition to use 4 plugins:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Basic: the basic plugins for an NLP backend, that includes evaluator, javascript compiler, logger, and NLP classes"),(0,a.kt)("li",{parentName:"ul"},"LangEn: the plugin to use English language"),(0,a.kt)("li",{parentName:"ul"},"ExpressApiServer: the plugin to have an Express API server"),(0,a.kt)("li",{parentName:"ul"},"DirectlineConnector: the plugin that uses the ExpressApiServer to serve an API for the chatbot")),(0,a.kt)("p",null,"Also this configures the ExpressApiServer to be exposed at port 3000 and to serve the chatbot frontend (serveBot: true).\nFinally, it tells the NLP to import the corpus defined in the file ",(0,a.kt)("em",{parentName:"p"},"corpus.json"),"."),(0,a.kt)("h2",{id:"create-the-corpusjson"},"Create the corpus.json"),(0,a.kt)("p",null,"Add the file ",(0,a.kt)("em",{parentName:"p"},"corpus.json")," with this content:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "Corpus with entities",\n  "locale": "en-US",\n  "contextData": "./heros.json",\n  "data": [\n    {\n      "intent": "hero.realname",\n      "utterances": [\n        "what is the real name of @hero"\n      ],\n      "answers": [\n        "The real name of {{ hero }} is {{ _data[entities.hero.option].realName }}"\n      ]\n    },\n    {\n      "intent": "hero.city",\n      "utterances": [\n        "where @hero lives?",\n        "what\'s the city of @hero?"\n      ],\n      "answers": [\n        "{{ hero }} lives at {{ _data[entities.hero.option].city }}"\n      ]\n    }\n  ],\n  "entities": {\n    "hero": {\n      "options": {\n        "spiderman": ["spiderman", "spider-man"],\n        "ironman": ["ironman", "iron-man"],\n        "thor": ["thor"]\n      }\n    }\n  }\n}\n')),(0,a.kt)("p",null,"This creates 2 intents: one to know the real name of a hero and other one to know where the hero lives.\nIt also creates the entity to recognize the heros: spiderman, ironman and thor, and also their synonyms.\nThere is a part in the json to tell the NLP to load some contextData that will be used to generate the answers:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'  "contextData": "./heros.json",\n')),(0,a.kt)("p",null,"If you take a look at one answer, ",(0,a.kt)("inlineCode",{parentName:"p"},"_data[entities.hero.option].city")," as an example, the content at the json ",(0,a.kt)("em",{parentName:"p"},"heros.json")," will be accessible in the context as data. Also, the entities are accessible in the property ",(0,a.kt)("em",{parentName:"p"},"entities"),", so because the entity name is ",(0,a.kt)("em",{parentName:"p"},"hero")," you'll have the result from the NER for the entity ",(0,a.kt)("em",{parentName:"p"},"hero")," stored in ",(0,a.kt)("em",{parentName:"p"},"entities.hero")),(0,a.kt)("h2",{id:"create-the-herosjson"},"Create the heros.json"),(0,a.kt)("p",null,"Create the file ",(0,a.kt)("em",{parentName:"p"},"heros.json")," with this content:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "spiderman": {\n    "realName": "Peter Parker",\n    "city": "Queens, New York"\n  },\n  "ironman": {\n    "realName": "Tony Stark",\n    "city": "Stark Tower, New York"\n  },\n  "thor": {\n    "realName": "Odinson",\n    "city": "Asgard"\n  }\n}\n')),(0,a.kt)("h2",{id:"create-the-indexjs"},"Create the index.js"),(0,a.kt)("p",null,"Create the file ",(0,a.kt)("em",{parentName:"p"},"index.js")," with this content:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const { dockStart } = require('@nlpjs/basic');\n\n(async () => {\n  const dock = await dockStart();\n  const nlp = dock.get('nlp');\n  await nlp.train();\n})();\n")),(0,a.kt)("p",null,"This initializes the project and loads all the jsons. It also builds the structure when you call ",(0,a.kt)("em",{parentName:"p"},"dockStart()")," and then it returns a dock for the containers.\nThen you can retrieve instances from the container, in this case we retrieve the ",(0,a.kt)("em",{parentName:"p"},"nlp")," instance to train it."),(0,a.kt)("h2",{id:"start-the-application"},"Start the application"),(0,a.kt)("p",null,"You can start your application running:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"node index.js\n")),(0,a.kt)("p",null,"Then you can navigate to http://localhost:3000 to use it."),(0,a.kt)("h2",{id:"stored-context"},"Stored context"),(0,a.kt)("p",null,"You'll see that you can ask for information about a hero, but also that if you're talking with the bot about a hero then you can omit the reference to the hero you're talking about.\nThis context is stored per conversation, so different conversations have their own context variables."),(0,a.kt)("div",{align:"center"},(0,a.kt)("img",{src:"https://github.com/axa-group/nlp.js/raw/master/screenshots/ner-demo.png",width:"auto",height:"auto"})))}h.isMDXComponent=!0}}]);