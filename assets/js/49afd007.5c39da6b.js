"use strict";(self.webpackChunknlp_docs=self.webpackChunknlp_docs||[]).push([[9323],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),p=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(i.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(t),m=a,g=d["".concat(i,".").concat(m)]||d[m]||u[m]||s;return t?r.createElement(g,o(o({ref:n},c),{},{components:t})):r.createElement(g,o({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,o=new Array(s);o[0]=d;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<s;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8697:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var r=t(7462),a=(t(7294),t(3905));const s={},o="Web and React Native",l={unversionedId:"browser/webandreact",id:"browser/webandreact",title:"Web and React Native",description:"Preparing to generate a bundle",source:"@site/docs/05-browser/01-webandreact.md",sourceDirName:"05-browser",slug:"/browser/webandreact",permalink:"/browser/webandreact",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Custom connectors",permalink:"/Connectors/custom_connectors"},next:{title:"node-nlp-rn",permalink:"/browser/node-nlp-rn"}},i={},p=[{value:"Preparing to generate a bundle",id:"preparing-to-generate-a-bundle",level:2},{value:"Your first web NLP",id:"your-first-web-nlp",level:2},{value:"Creating a distributable version",id:"creating-a-distributable-version",level:2},{value:"Load corpus from URL",id:"load-corpus-from-url",level:2}],c={toc:p};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"web-and-react-native"},"Web and React Native"),(0,a.kt)("h2",{id:"preparing-to-generate-a-bundle"},"Preparing to generate a bundle"),(0,a.kt)("p",null,"NLP.js is developed to be a Node.js project, but even with that it can be compiled to run in both Web and React Native applications. In fact, the libraries of NLP.js take this into account and the core libraries don't use anything that cannot be executed on web, like the file system.\nBut to generate the web bundle it needs to install two development libraries: browserify and terser. "),(0,a.kt)("p",null,"To do that run this in your project folder:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm i -D browserify terser\n")),(0,a.kt)("p",null,"Now you will need a script to generate the bundle.\nOpen your ",(0,a.kt)("em",{parentName:"p"},"package.json")," and add this in the scripts section:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'    "browserdist": "browserify ./index.js | terser --compress --mangle > ./bundle.js"\n')),(0,a.kt)("p",null,"From this moment, you can generate a file ",(0,a.kt)("em",{parentName:"p"},"bundle.js")," containing the browser bundle by executing this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm run browserdist\n")),(0,a.kt)("h2",{id:"your-first-web-nlp"},"Your first web NLP"),(0,a.kt)("p",null,"You can download the code for this example here: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/jesus-seijas-sp/nlpjs-examples/tree/master/02.web/01.bundle"},"https://github.com/jesus-seijas-sp/nlpjs-examples/tree/master/02.web/01.bundle")),(0,a.kt)("p",null,"Now you will need some HTML to run the code in the browser, we will start with this simple example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},"<html>\n<head>\n  <title>Test</title>\n  <script src='./bundle.js'><\/script>\n</head>\n<body>\n</body>\n</html>\n")),(0,a.kt)("p",null,"Install the libraries that will be needed to run the nlp:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @nlpjs/core @nlpjs/lang-en-min @nlpjs/nlp\n")),(0,a.kt)("p",null,"The @nlpjs/core is the one that installs the container system and basic architecture.\nThe @nlpjs/nlp installs the nlp related things,\nand finally @nlpjs/lang-en-min installs the English language but without the sentiment dictionaries. That's because the sentiment analysis dictionaries are big in size."),(0,a.kt)("p",null,"Now create an ",(0,a.kt)("em",{parentName:"p"},"index.js")," with this content:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const { containerBootstrap } = require('@nlpjs/core');\nconst { Nlp } = require('@nlpjs/nlp');\nconst { LangEn } = require('@nlpjs/lang-en-min');\n\n(async () => {\n  const container = await containerBootstrap();\n  container.use(Nlp);\n  container.use(LangEn);\n  const nlp = container.get('nlp');\n  nlp.settings.autoSave = false;\n  nlp.addLanguage('en');\n  // Adds the utterances and intents for the NLP\n  nlp.addDocument('en', 'goodbye for now', 'greetings.bye');\n  nlp.addDocument('en', 'bye bye take care', 'greetings.bye');\n  nlp.addDocument('en', 'okay see you later', 'greetings.bye');\n  nlp.addDocument('en', 'bye for now', 'greetings.bye');\n  nlp.addDocument('en', 'i must go', 'greetings.bye');\n  nlp.addDocument('en', 'hello', 'greetings.hello');\n  nlp.addDocument('en', 'hi', 'greetings.hello');\n  nlp.addDocument('en', 'howdy', 'greetings.hello');\n  \n  // Train also the NLG\n  nlp.addAnswer('en', 'greetings.bye', 'Till next time');\n  nlp.addAnswer('en', 'greetings.bye', 'see you soon!');\n  nlp.addAnswer('en', 'greetings.hello', 'Hey there!');\n  nlp.addAnswer('en', 'greetings.hello', 'Greetings!');\n  await nlp.train();\n  const response = await nlp.process('en', 'I should go now');\n  console.log(response);\n})();\n")),(0,a.kt)("p",null,"This creates a model equal to the first example you can find in the quickstart.\nThis line is very important because by default the nlp plugin tries to save the model after training, but in case, this will generate an exception."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javscript"},"nlp.settings.autoSave = false\n")),(0,a.kt)("p",null,"Now you can generate the bundle running"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm run browserdist\n")),(0,a.kt)("p",null,"The bundle size will be 111KB, compared to 3MB for version 3.x which is much better for the browser.\nOpen the index.html in a browser and take a look in the console."),(0,a.kt)("h2",{id:"creating-a-distributable-version"},"Creating a distributable version"),(0,a.kt)("p",null,"You can download the source code for this example here: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/jesus-seijas-sp/nlpjs-examples/tree/master/02.web/02.dist"},"https://github.com/jesus-seijas-sp/nlpjs-examples/tree/master/02.web/02.dist")),(0,a.kt)("p",null,"The problem with the previous example, is that every time that you have to modify your bot or build a new bot, you have to create the bundle again.\nBut, what if we can compile and expose the classes and functions of the NLP.js modules that we want? That way we can create a bundle that can be reusable between different bots, while separating what is NLP.js from our bot logic."),(0,a.kt)("p",null,"First modify the ",(0,a.kt)("em",{parentName:"p"},"index.js")," to not include our bot logic and to simply import everything from the NLP.js libraries and expose them using the window object:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const core = require('@nlpjs/core');\nconst nlp = require('@nlpjs/nlp');\nconst langenmin = require('@nlpjs/lang-en-min');\n\nwindow.nlpjs = { ...core, ...nlp, ...langenmin };\n")),(0,a.kt)("p",null,"Second, compile the bundle:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm run browserdist\n")),(0,a.kt)("p",null,"Third, move your bot logic to the index.html:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},"<html>\n<head>\n  <title>Test</title>\n  <script src='./bundle.js'><\/script>\n  <script>\n  const { containerBootstrap, Nlp, LangEn } = window.nlpjs;\n\n  (async () => {\n    const container = await containerBootstrap();\n    container.use(Nlp);\n    container.use(LangEn);\n    const nlp = container.get('nlp');\n    nlp.settings.autoSave = false;\n    nlp.addLanguage('en');\n    // Adds the utterances and intents for the NLP\n    nlp.addDocument('en', 'goodbye for now', 'greetings.bye');\n    nlp.addDocument('en', 'bye bye take care', 'greetings.bye');\n    nlp.addDocument('en', 'okay see you later', 'greetings.bye');\n    nlp.addDocument('en', 'bye for now', 'greetings.bye');\n    nlp.addDocument('en', 'i must go', 'greetings.bye');\n    nlp.addDocument('en', 'hello', 'greetings.hello');\n    nlp.addDocument('en', 'hi', 'greetings.hello');\n    nlp.addDocument('en', 'howdy', 'greetings.hello');\n    \n    // Train also the NLG\n    nlp.addAnswer('en', 'greetings.bye', 'Till next time');\n    nlp.addAnswer('en', 'greetings.bye', 'see you soon!');\n    nlp.addAnswer('en', 'greetings.hello', 'Hey there!');\n    nlp.addAnswer('en', 'greetings.hello', 'Greetings!');\n    await nlp.train();\n    const response = await nlp.process('en', 'I should go now');\n    console.log(response);\n  })();\n  <\/script>\n</head>\n<body>\n</body>\n</html>\n")),(0,a.kt)("h2",{id:"load-corpus-from-url"},"Load corpus from URL"),(0,a.kt)("p",null,"You can download the source code of this example here: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/jesus-seijas-sp/nlpjs-examples/tree/master/02.web/03.filecorpus"},"https://github.com/jesus-seijas-sp/nlpjs-examples/tree/master/02.web/03.filecorpus")),(0,a.kt)("p",null,"Previously, the corpus was manually loaded into the nlp, but what if we want a corpus in a json file, like in the backend and to load it from an URL?\nFirst, we need to register a valid file system into our container, in our case a request plugin that uses axios.\nFirst install the package:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @nlpjs/request-rn\n")),(0,a.kt)("p",null,"Now we need to expose it in our ",(0,a.kt)("em",{parentName:"p"},"index.js"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const core = require('@nlpjs/core');\nconst nlp = require('@nlpjs/nlp');\nconst langenmin = require('@nlpjs/lang-en-min');\nconst requestrn = require('@nlpjs/request-rn');\n\nwindow.nlpjs = { ...core, ...nlp, ...langenmin, ...requestrn };\n")),(0,a.kt)("p",null,"And compile the bundle:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm run browserdist\n")),(0,a.kt)("p",null,"The new bundle will be 126KB, that is 15KB more than without this plugin."),(0,a.kt)("p",null,"And in our ",(0,a.kt)("em",{parentName:"p"},"index.html")," we change our script:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"  const { containerBootstrap, Nlp, LangEn, fs } = window.nlpjs;\n\n  (async () => {\n    const container = await containerBootstrap();\n    container.register('fs', fs);\n    container.use(Nlp);\n    container.use(LangEn);\n    const nlp = container.get('nlp');\n    nlp.settings.autoSave = false;\n    await nlp.addCorpus('https://raw.githubusercontent.com/jesus-seijas-sp/nlpjs-examples/master/01.quickstart/02.filecorpus/corpus-en.json');\n    await nlp.train();\n    const response = await nlp.process('en', 'who are you');\n    console.log(response);\n  })();\n")))}u.isMDXComponent=!0}}]);