"use strict";(self.webpackChunknlp_docs=self.webpackChunknlp_docs||[]).push([[6513],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),h=p(n),d=r,f=h["".concat(s,".").concat(d)]||h[d]||u[d]||o;return n?a.createElement(f,i(i({ref:t},c),{},{components:n})):a.createElement(f,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9733:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={},i="QnA",l={unversionedId:"extras/qna",id:"extras/qna",title:"QnA",description:"This will guide you through the process of creating a bot using a QnA tsv file instead of a corpus with intents.",source:"@site/docs/100-extras/03-qna.md",sourceDirName:"100-extras",slug:"/extras/qna",permalink:"/extras/qna",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"@nlpjs/emoji",permalink:"/extras/emoji"},next:{title:"Logging",permalink:"/extras/logger"}},s={},p=[{value:"Install the library and the qna plugin",id:"install-the-library-and-the-qna-plugin",level:2},{value:"Train and test a QnA file",id:"train-and-test-a-qna-file",level:2},{value:"Extracting the configuration into a file",id:"extracting-the-configuration-into-a-file",level:2},{value:"Exposing the bot with a Web and API",id:"exposing-the-bot-with-a-web-and-api",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"qna"},"QnA"),(0,r.kt)("p",null,"This will guide you through the process of creating a bot using a QnA tsv file instead of a corpus with intents.\nThe format of the file is a text file where each line is a question and an answer, separated by a tabulator.\nYou have an example of file ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jesus-seijas-sp/nlpjs-examples/blob/master/03.qna/01.filecorpus/qna.tsv"},"here")),(0,r.kt)("p",null,"The process is exactly the same as having a bot with a chatbot, so we strongly recommend to do the ",(0,r.kt)("a",{parentName:"p",href:"/Quickstart/quickstart"},"quickstart")),(0,r.kt)("h2",{id:"install-the-library-and-the-qna-plugin"},"Install the library and the qna plugin"),(0,r.kt)("p",null,"In your node project folder, install the basic library and the qna importer, that will install the core and basic plugins for working in the backend, and also the plugin for converting qna files to your corpus."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"npm i @nlpjs/basic @nlpjs/qna-importer\n")),(0,r.kt)("h2",{id:"train-and-test-a-qna-file"},"Train and test a QnA file"),(0,r.kt)("p",null,"The source code for this example is ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jesus-seijas-sp/nlpjs-examples/tree/master/03.qna/01.filecorpus"},"here")),(0,r.kt)("p",null,"Add the corpus file to your folder, and then create this index.js:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const { dockStart } = require("@nlpjs/basic");\n\n(async () => {\n  const dock = await dockStart({ use: ["Basic", "Qna"] });\n  const nlp = dock.get("nlp");\n  await nlp.addCorpus({ filename: "./qna.tsv", importer: "qna", locale: "en" });\n  await nlp.train();\n  const response = await nlp.process("en", "Who are you");\n  console.log(response);\n})();\n')),(0,r.kt)("p",null,"Replace the filename './qna.tsv' with the path to your qna file, and the locale with the locale of your file (remember that if it's not English, you should install the language plugin for your language)."),(0,r.kt)("p",null,"Now you can execute this, and you'll see that the qna is trained and it resolves the answer to the question."),(0,r.kt)("h2",{id:"extracting-the-configuration-into-a-file"},"Extracting the configuration into a file"),(0,r.kt)("p",null,"The source code for this example is ","[here][https://github.com/jesus-seijas-sp/nlpjs-examples/tree/master/03.qna/02.config]"),(0,r.kt)("p",null,"Now we can remove code that is configuration related into a separate file. Add a conf.json file with this content:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "settings": {\n    "nlp": {\n      "corpora": [\n        { "filename": "qna.tsv", "importer": "qna", "locale": "en" }\n      ]\n    }\n  },\n  "use": ["Basic", "Qna"]\n}\n')),(0,r.kt)("p",null,"And the new code will be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const { dockStart } = require("@nlpjs/basic");\n\n(async () => {\n  const dock = await dockStart();\n  const nlp = dock.get("nlp");\n  await nlp.train();\n  const response = await nlp.process("en", "Who are you");\n  console.log(response);\n})();\n')),(0,r.kt)("h2",{id:"exposing-the-bot-with-a-web-and-api"},"Exposing the bot with a Web and API"),(0,r.kt)("p",null,"The code for this example is ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jesus-seijas-sp/nlpjs-examples/tree/master/03.qna/03.webchat"},"here")),(0,r.kt)("p",null,"Now install the plugins for the express server and the directline API:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"npm i @nlpjs/express-api-server @nlpjs/directline-connector\n")),(0,r.kt)("p",null,"Change the conf.json to include those plugins and expose the API:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "settings": {\n    "nlp": {\n      "corpora": [\n        { "filename": "qna.tsv", "importer": "qna", "locale": "en" }\n      ]\n    },\n    "api-server": {\n      "port": 3000,\n      "serveBot": true\n    }\n  },\n  "use": ["Basic", "Qna", "ExpressApiServer", "DirectlineConnector"]\n}\n')),(0,r.kt)("p",null,"You'll need a pipeline file to train the nlp, so create a pipelines.md file with this content:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-markdown"},"# default\n\n## main\n\nnlp.train\n")),(0,r.kt)("p",null,"Finally the index.js code should be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const { dockStart } = require("@nlpjs/basic");\n\n(async () => {\n  await dockStart();\n})();\n')),(0,r.kt)("p",null,"Now if you browse http://localhost:3000 you'll see an empty page with an small blue chat bubble, if you click in the bubble you'll be able to chat with your bot"),(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{src:"https://github.com/axa-group/nlp.js/raw/master/screenshots/webchat.png",width:"auto",height:"auto"})))}u.isMDXComponent=!0}}]);