"use strict";(self.webpackChunknlp_docs=self.webpackChunknlp_docs||[]).push([[2961],{3905:(e,n,o)=>{o.d(n,{Zo:()=>p,kt:()=>m});var t=o(7294);function r(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function c(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function a(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?c(Object(o),!0).forEach((function(n){r(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):c(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function l(e,n){if(null==e)return{};var o,t,r=function(e,n){if(null==e)return{};var o,t,r={},c=Object.keys(e);for(t=0;t<c.length;t++)o=c[t],n.indexOf(o)>=0||(r[o]=e[o]);return r}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(t=0;t<c.length;t++)o=c[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var s=t.createContext({}),i=function(e){var n=t.useContext(s),o=n;return e&&(o="function"==typeof e?e(n):a(a({},n),e)),o},p=function(e){var n=i(e.components);return t.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var o=e.components,r=e.mdxType,c=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),f=i(o),m=r,d=f["".concat(s,".").concat(m)]||f[m]||u[m]||c;return o?t.createElement(d,a(a({ref:n},p),{},{components:o})):t.createElement(d,a({ref:n},p))}));function m(e,n){var o=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var c=o.length,a=new Array(c);a[0]=f;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var i=2;i<c;i++)a[i]=o[i];return t.createElement.apply(null,a)}return t.createElement.apply(null,o)}f.displayName="MDXCreateElement"},9928:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>c,metadata:()=>l,toc:()=>i});var t=o(7462),r=(o(7294),o(3905));const c={},a="Console connector",l={unversionedId:"Connectors/console-connector",id:"Connectors/console-connector",title:"Console connector",description:"The console connector allows you to manage scenarios where the main interface is the console.",source:"@site/docs/04-Connectors/02-console-connector.md",sourceDirName:"04-Connectors",slug:"/Connectors/console-connector",permalink:"/Connectors/console-connector",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Connectors",permalink:"/Connectors/connectors"},next:{title:"Directline connector",permalink:"/Connectors/directline-connector"}},s={},i=[{value:"Installation",id:"installation",level:2},{value:"Example of use of the package",id:"example-of-use-of-the-package",level:2},{value:"Example of use with @nlpjs/basic",id:"example-of-use-with-nlpjsbasic",level:2},{value:"Configuration",id:"configuration",level:2}],p={toc:i};function u(e){let{components:n,...o}=e;return(0,r.kt)("wrapper",(0,t.Z)({},p,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"console-connector"},"Console connector"),(0,r.kt)("p",null,"The console connector allows you to manage scenarios where the main interface is the console."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"You can install the console connector @nlpjs/console-connector using:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"    npm install @nlpjs/console-connector\n")),(0,r.kt)("h2",{id:"example-of-use-of-the-package"},"Example of use of the package"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const { ConsoleConnector } = require("@nlpjs/console-connector");\n\nconst connector = new ConsoleConnector();\nconnector.onHear = (self, text) => {\n  self.say(`You said "${text}"`);\n};\nconnector.say("Say something!");\n')),(0,r.kt)("h2",{id:"example-of-use-with-nlpjsbasic"},"Example of use with @nlpjs/basic"),(0,r.kt)("p",null,"Having a file ",(0,r.kt)("em",{parentName:"p"},"corpus.json")," in the source code folder, you could have a bot like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const { dockStart } = require("@nlpjs/basic");\n\n(async () => {\n  const dockConfiguration = {\n    settings: {\n      nlp: { corpora: ["./corpus.json"] },\n    },\n    use: ["Nlp", "ConsoleConnector"],\n  };\n  const dock = await dockStart(dockConfiguration);\n  const nlp = dock.get("nlp");\n  await nlp.train();\n  const connector = dock.get("console");\n  connector.say("Say something!");\n})();\n')),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"For configuration details refer to ",(0,r.kt)("a",{parentName:"p",href:"/configuration#console-connector"},"the proper configuration section")))}u.isMDXComponent=!0}}]);