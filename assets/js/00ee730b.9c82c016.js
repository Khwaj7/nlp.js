"use strict";(self.webpackChunknlp_docs=self.webpackChunknlp_docs||[]).push([[3455],{3905:(e,a,n)=>{n.d(a,{Zo:()=>u,kt:()=>g});var t=n(7294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=t.createContext({}),d=function(e){var a=t.useContext(l),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},u=function(e){var a=d(e.components);return t.createElement(l.Provider,{value:a},e.children)},c={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=d(n),g=r,p=m["".concat(l,".").concat(g)]||m[g]||c[g]||o;return n?t.createElement(p,i(i({ref:a},u),{},{components:n})):t.createElement(p,i({ref:a},u))}));function g(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in a)hasOwnProperty.call(a,l)&&(s[l]=a[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var d=2;d<o;d++)i[d]=n[d];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4814:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var t=n(7462),r=(n(7294),n(3905));const o={},i="@nlpjs/nlu",s={unversionedId:"nlu/nlu",id:"nlu/nlu",title:"@nlpjs/nlu",description:"Installation",source:"@site/docs/07-nlu/01-nlu.md",sourceDirName:"07-nlu",slug:"/nlu/nlu",permalink:"/nlu/nlu",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"NeuralNetwork",permalink:"/neural"},next:{title:"Brain NLU",permalink:"/nlu/brain-nlu"}},l={},d=[{value:"Installation",id:"installation",level:2},{value:"NluNeural",id:"nluneural",level:2},{value:"DomainManager",id:"domainmanager",level:2},{value:"NluManager",id:"nlumanager",level:2},{value:"Supported languages",id:"supported-languages",level:3}],u={toc:d};function c(e){let{components:a,...n}=e;return(0,r.kt)("wrapper",(0,t.Z)({},u,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"nlpjsnlu"},"@nlpjs/nlu"),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"You can install @nlpjs/nlu:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"    npm install @nlpjs/nlu\n")),(0,r.kt)("h2",{id:"nluneural"},"NluNeural"),(0,r.kt)("p",null,"Class ",(0,r.kt)("em",{parentName:"p"},"NluNeural")," is an abstraction built on top of ",(0,r.kt)("em",{parentName:"p"},"NeuralNetwork")," that help in using ",(0,r.kt)("em",{parentName:"p"},"NeuralNetwork")," with a corpus.\nA language can be used as a plugin in order to use the correct tokenizer and stemmer for this language.\nIn this example both versions, with language and without language, are used in order to compare the results."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const { containerBootstrap } = require("@nlpjs/core");\nconst { NluNeural } = require("@nlpjs/nlu");\nconst { LangEn } = require("@nlpjs/lang-en");\nconst corpus = require("./corpus50.json");\n\nfunction prepareCorpus(input, isTests = false) {\n  const result = [];\n  for (let i = 0; i < input.data.length; i += 1) {\n    const { intent } = input.data[i];\n    const utterances = isTests ? input.data[i].tests : input.data[i].utterances;\n    for (let j = 0; j < utterances.length; j += 1) {\n      result.push({ utterance: utterances[j], intent });\n    }\n  }\n  return result;\n}\n\nasync function measure(useStemmer) {\n  const container = await containerBootstrap();\n  if (useStemmer) {\n    container.use(LangEn);\n  }\n  const nlu = new NluNeural({ container, locale: "en", log: false });\n  await nlu.train(prepareCorpus(corpus));\n  const tests = prepareCorpus(corpus, true);\n  let good = 0;\n  let total = 0;\n  for (let i = 0; i < tests.length; i += 1) {\n    const { utterance, intent } = tests[i];\n    const result = await nlu.process(utterance);\n    total += 1;\n    if (result.classifications[0].intent === intent) {\n      good += 1;\n    }\n  }\n  console.log(\n    `Stemmer: ${useStemmer} Good: ${good} Total: ${total} Precision: ${\n      good / total\n    }`\n  );\n}\n\n(async () => {\n  await measure(false);\n  await measure(true);\n})();\n')),(0,r.kt)("h2",{id:"domainmanager"},"DomainManager"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"DomainManager")," is a class abstraction on top of ",(0,r.kt)("em",{parentName:"p"},"NluNeural"),".\nIt adds the concept of ",(0,r.kt)("em",{parentName:"p"},"domain"),", so each intent belongs to one domain; that way we can have domains for ",(0,r.kt)("em",{parentName:"p"},"smalltalk"),", ",(0,r.kt)("em",{parentName:"p"},"human resources"),", ",(0,r.kt)("em",{parentName:"p"},"claims"),", or whatever logical split of intents that we want to have.\nEach ",(0,r.kt)("em",{parentName:"p"},"DomainManager")," instance has only one language.\nIt can be trained by domain or all together:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"All together means that all the intents are trained into the same model, no matters the domain of the intent"),(0,r.kt)("li",{parentName:"ul"},"By domain means that every single domain has its own model trained, and there is a master model that is trained to classify an utterance into a domain. That way, when a utterance is classified, it is processed by the master domain to classify into the domain, and then is processed by the model of the domain to calculate the intent.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const { containerBootstrap } = require("@nlpjs/core");\nconst { DomainManager, NluNeural } = require("@nlpjs/nlu");\nconst { LangEn } = require("@nlpjs/lang-en");\n\nfunction addFoodDomain(manager) {\n  manager.add("food", "what do I have in my basket", "order.check");\n  manager.add("food", "check my cart", "order.check");\n  manager.add("food", "show me what I\'ve ordered", "order.check");\n  manager.add("food", "what\'s in my basket", "order.check");\n  manager.add("food", "check my order", "order.check");\n  manager.add("food", "check what I have ordered", "order.check");\n  manager.add("food", "show my order", "order.check");\n  manager.add("food", "check my basket", "order.check");\n  manager.add("food", "how soon will it be delivered", "order.check_status");\n  manager.add("food", "check the status of my delivery", "order.check_status");\n  manager.add("food", "when should I expect delivery", "order.check_status");\n  manager.add(\n    "food",\n    "what is the status of my delivery",\n    "order.check_status"\n  );\n  manager.add("food", "check my order status", "order.check_status");\n  manager.add("food", "where is my order", "order.check_status");\n  manager.add("food", "where is my delivery", "order.check_status");\n  manager.add("food", "status of my order", "order.check_status");\n}\n\nfunction addPersonalityDomain(manager) {\n  manager.add("personality", "say about you", "agent.acquaintance");\n  manager.add("personality", "why are you here", "agent.acquaintance");\n  manager.add("personality", "what is your personality", "agent.acquaintance");\n  manager.add("personality", "describe yourself", "agent.acquaintance");\n  manager.add("personality", "tell me about yourself", "agent.acquaintance");\n  manager.add("personality", "tell me about you", "agent.acquaintance");\n  manager.add("personality", "what are you", "agent.acquaintance");\n  manager.add("personality", "who are you", "agent.acquaintance");\n  manager.add("personality", "talk about yourself", "agent.acquaintance");\n  manager.add("personality", "your age", "agent.age");\n  manager.add("personality", "how old is your platform", "agent.age");\n  manager.add("personality", "how old are you", "agent.age");\n  manager.add("personality", "what\'s your age", "agent.age");\n  manager.add("personality", "I\'d like to know your age", "agent.age");\n  manager.add("personality", "tell me your age", "agent.age");\n  manager.add("personality", "you\'re annoying me", "agent.annoying");\n  manager.add("personality", "you are such annoying", "agent.annoying");\n  manager.add("personality", "you annoy me", "agent.annoying");\n  manager.add("personality", "you are annoying", "agent.annoying");\n  manager.add("personality", "you are irritating", "agent.annoying");\n  manager.add("personality", "you are annoying me so much", "agent.annoying");\n  manager.add("personality", "you\'re bad", "agent.bad");\n  manager.add("personality", "you\'re horrible", "agent.bad");\n  manager.add("personality", "you\'re useless", "agent.bad");\n  manager.add("personality", "you\'re waste", "agent.bad");\n  manager.add("personality", "you\'re the worst", "agent.bad");\n  manager.add("personality", "you are a lame", "agent.bad");\n  manager.add("personality", "I hate you", "agent.bad");\n  manager.add("personality", "be more clever", "agent.beclever");\n  manager.add("personality", "can you get smarter", "agent.beclever");\n  manager.add("personality", "you must learn", "agent.beclever");\n  manager.add("personality", "you must study", "agent.beclever");\n  manager.add("personality", "be clever", "agent.beclever");\n  manager.add("personality", "be smart", "agent.beclever");\n  manager.add("personality", "be smarter", "agent.beclever");\n  manager.add("personality", "you are looking awesome", "agent.beautiful");\n  manager.add("personality", "you\'re looking good", "agent.beautiful");\n  manager.add("personality", "you\'re looking fantastic", "agent.beautiful");\n  manager.add("personality", "you look greet today", "agent.beautiful");\n  manager.add("personality", "I think you\'re beautiful", "agent.beautiful");\n  manager.add("personality", "you look amazing today", "agent.beautiful");\n  manager.add("personality", "you\'re so beautiful today", "agent.beautiful");\n  manager.add("personality", "you look very pretty", "agent.beautiful");\n  manager.add("personality", "you look pretty good", "agent.beautiful");\n  manager.add("personality", "when is your birthday", "agent.birthday");\n  manager.add("personality", "when were you born", "agent.birthday");\n  manager.add("personality", "when do you have birthday", "agent.birthday");\n  manager.add("personality", "date of your birthday", "agent.birthday");\n}\n\n(async () => {\n  const container = await containerBootstrap();\n  container.use(NluNeural);\n  container.use(LangEn);\n  // Set trainByDomain to true to train by domain\n  const manager = new DomainManager({ container, trainByDomain: false });\n  addFoodDomain(manager);\n  addPersonalityDomain(manager);\n  await manager.train();\n  const actual = await manager.process("tell me what is in my basket");\n  console.log(actual);\n})();\n')),(0,r.kt)("h2",{id:"nlumanager"},"NluManager"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"NluManager")," is the abstraction over ",(0,r.kt)("em",{parentName:"p"},"DomainManager"),": it contains one ",(0,r.kt)("em",{parentName:"p"},"DomainManager")," instance per each language that we want to use. It is also able to guess automatically the language of the sentence, so we can provide the locale of the sentence or omit it."),(0,r.kt)("p",null,"This is an example with two languages (English and Spanish) with two domains each (personality and food)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const { containerBootstrap } = require("@nlpjs/core");\nconst { NluManager, NluNeural } = require("@nlpjs/nlu");\nconst { LangEn } = require("@nlpjs/lang-en");\nconst { LangEs } = require("@nlpjs/lang-es");\n\nfunction addFoodDomainEn(manager) {\n  manager.assignDomain("en", "order.check", "food");\n  manager.add("en", "what do I have in my basket", "order.check");\n  manager.add("en", "check my cart", "order.check");\n  manager.add("en", "show me what I\'ve ordered", "order.check");\n  manager.add("en", "what\'s in my basket", "order.check");\n  manager.add("en", "check my order", "order.check");\n  manager.add("en", "check what I have ordered", "order.check");\n  manager.add("en", "show my order", "order.check");\n  manager.add("en", "check my basket", "order.check");\n\n  manager.assignDomain("en", "order.check_status", "food");\n  manager.add("en", "how soon will it be delivered", "order.check_status");\n  manager.add("en", "check the status of my delivery", "order.check_status");\n  manager.add("en", "when should I expect delivery", "order.check_status");\n  manager.add("en", "check my order status", "order.check_status");\n  manager.add("en", "where is my order", "order.check_status");\n  manager.add("en", "where is my delivery", "order.check_status");\n  manager.add("en", "status of my order", "order.check_status");\n}\n\nfunction addFoodDomainEs(manager) {\n  manager.assignDomain("es", "order.check", "food");\n  manager.add("es", "qu\xe9 tengo en mi cesta", "order.check");\n  manager.add("es", "comprueba mi carrito", "order.check");\n  manager.add("es", "ens\xe9\xf1ame qu\xe9 he pedido", "order.check");\n  manager.add("es", "qu\xe9 hay en mi carrito?", "order.check");\n  manager.add("es", "comprueba mi compra", "order.check");\n  manager.add("es", "comprueba qu\xe9 he comprado", "order.check");\n  manager.add("es", "mu\xe9strame mi compra", "order.check");\n\n  manager.assignDomain("es", "order.check_status", "food");\n  manager.add("es", "cu\xe1ndo me lo van a traer?", "order.check_status");\n  manager.add("es", "c\xf3mo va la entrega?", "order.check_status");\n  manager.add("es", "cu\xe1ndo me traer\xe1n mi pedido?", "order.check_status");\n  manager.add("es", "en qu\xe9 estado est\xe1 mi pedido?", "order.check_status");\n  manager.add("es", "d\xf3nde est\xe1 mi compra?", "order.check_status");\n  manager.add("es", "d\xf3nde est\xe1 mi pedido?", "order.check_status");\n  manager.add("es", "estado de mi compra", "order.check_status");\n}\n\nfunction addPersonalityDomainEn(manager) {\n  manager.assignDomain("en", "agent.acquaintance", "personality");\n  manager.add("en", "say about you", "agent.acquaintance");\n  manager.add("en", "why are you here", "agent.acquaintance");\n  manager.add("en", "what is your personality", "agent.acquaintance");\n  manager.add("en", "describe yourself", "agent.acquaintance");\n  manager.add("en", "tell me about yourself", "agent.acquaintance");\n  manager.add("en", "tell me about you", "agent.acquaintance");\n  manager.add("en", "what are you", "agent.acquaintance");\n  manager.add("en", "who are you", "agent.acquaintance");\n  manager.add("en", "talk about yourself", "agent.acquaintance");\n\n  manager.assignDomain("en", "agent.age", "personality");\n  manager.add("en", "your age", "agent.age");\n  manager.add("en", "how old is your platform", "agent.age");\n  manager.add("en", "how old are you", "agent.age");\n  manager.add("en", "what\'s your age", "agent.age");\n  manager.add("en", "I\'d like to know your age", "agent.age");\n  manager.add("en", "tell me your age", "agent.age");\n}\n\nfunction addPersonalityDomainEs(manager) {\n  manager.assignDomain("es", "agent.acquaintance", "personality");\n  manager.add("es", "cu\xe9ntame sobre ti", "agent.acquaintance");\n  manager.add("es", "qu\xe9 haces aqu\xed?", "agent.acquaintance");\n  manager.add("es", "c\xf3mo es tu personalidad?", "agent.acquaintance");\n  manager.add("es", "descr\xedbete", "agent.acquaintance");\n  manager.add("es", "qui\xe9n eres?", "agent.acquaintance");\n  manager.add("es", "qu\xe9 eres?", "agent.acquaintance");\n  manager.add("es", "h\xe1blame de ti", "agent.acquaintance");\n\n  manager.assignDomain("es", "agent.age", "personality");\n  manager.add("es", "qu\xe9 edad tienes?", "agent.age");\n  manager.add("es", "cu\xe1ntos a\xf1os tienes?", "agent.age");\n  manager.add("es", "cu\xe1l es tu edad?", "agent.age");\n  manager.add("es", "quiero saber tu edad", "agent.age");\n  manager.add("es", "dime tu edad", "agent.age");\n}\n\n(async () => {\n  const container = await containerBootstrap();\n  container.use(LangEn);\n  container.use(LangEs);\n  container.use(NluNeural);\n  const manager = new NluManager({\n    container,\n    locales: ["en", "es"],\n    trainByDomain: false,\n  });\n  addFoodDomainEn(manager);\n  addFoodDomainEs(manager);\n  addPersonalityDomainEn(manager);\n  addPersonalityDomainEs(manager);\n  await manager.train();\n  // You can provide the locale of the language\n  let actual = await manager.process("es", "dime qui\xe9n eres t\xfa");\n  console.log(actual);\n  // If the locale is not provided, then the language is guessed\n  actual = await manager.process("dime qui\xe9n eres t\xfa");\n  console.log(actual);\n  // {\n  //   locale: \'es\',\n  //   utterance: \'dime qui\xe9n eres t\xfa\',\n  //   domain: \'personality\',\n  //   languageGuessed: true,\n  //   localeIso2: \'es\',\n  //   language: \'Spanish\',\n  //   nluAnswer: {\n  //     classifications: [ [Object], [Object] ],\n  //     entities: undefined,\n  //     explanation: undefined\n  //   },\n  //   classifications: [\n  //     { intent: \'agent.acquaintance\', score: 0.8546458520495468 },\n  //     { intent: \'agent.age\', score: 0.14535414795045312 }\n  //   ],\n  //   intent: \'agent.acquaintance\',\n  //   score: 0.8546458520495468\n  // }\n})();\n')),(0,r.kt)("h3",{id:"supported-languages"},"Supported languages"),(0,r.kt)("p",null,"NLU currently supports 40 languages:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Arabic (ar)"),(0,r.kt)("li",{parentName:"ul"},"Armenian (hy)"),(0,r.kt)("li",{parentName:"ul"},"Basque (eu)"),(0,r.kt)("li",{parentName:"ul"},"Bengali (bn)"),(0,r.kt)("li",{parentName:"ul"},"Catala (ca)"),(0,r.kt)("li",{parentName:"ul"},"Chinese (zh)"),(0,r.kt)("li",{parentName:"ul"},"Czech (cs)"),(0,r.kt)("li",{parentName:"ul"},"Danish (da)"),(0,r.kt)("li",{parentName:"ul"},"Dutch (nl)"),(0,r.kt)("li",{parentName:"ul"},"English (en)"),(0,r.kt)("li",{parentName:"ul"},"Farsi (fa)"),(0,r.kt)("li",{parentName:"ul"},"Finnish (fi)"),(0,r.kt)("li",{parentName:"ul"},"French (fr)"),(0,r.kt)("li",{parentName:"ul"},"Galician (gl)"),(0,r.kt)("li",{parentName:"ul"},"German (de)"),(0,r.kt)("li",{parentName:"ul"},"Greek (el)"),(0,r.kt)("li",{parentName:"ul"},"Hindi (hi)"),(0,r.kt)("li",{parentName:"ul"},"Hungarian (hu)"),(0,r.kt)("li",{parentName:"ul"},"Indonesian (id)"),(0,r.kt)("li",{parentName:"ul"},"Irish (ga)"),(0,r.kt)("li",{parentName:"ul"},"Italian (it)"),(0,r.kt)("li",{parentName:"ul"},"Japanese (ja)"),(0,r.kt)("li",{parentName:"ul"},"Korean (ko)"),(0,r.kt)("li",{parentName:"ul"},"Lithuanian (lt)"),(0,r.kt)("li",{parentName:"ul"},"Malay (ms)"),(0,r.kt)("li",{parentName:"ul"},"Nepali (ne)"),(0,r.kt)("li",{parentName:"ul"},"Norwegian (no)"),(0,r.kt)("li",{parentName:"ul"},"Polish (pl)"),(0,r.kt)("li",{parentName:"ul"},"Portuguese (pt)"),(0,r.kt)("li",{parentName:"ul"},"Romanian (ro)"),(0,r.kt)("li",{parentName:"ul"},"Russian (ru)"),(0,r.kt)("li",{parentName:"ul"},"Serbian (sr)"),(0,r.kt)("li",{parentName:"ul"},"Slovene (sl)"),(0,r.kt)("li",{parentName:"ul"},"Spanish (es)"),(0,r.kt)("li",{parentName:"ul"},"Swedish (sv)"),(0,r.kt)("li",{parentName:"ul"},"Tagalog (tl)"),(0,r.kt)("li",{parentName:"ul"},"Tamil (ta)"),(0,r.kt)("li",{parentName:"ul"},"Thai (th)"),(0,r.kt)("li",{parentName:"ul"},"Turkish (tr)"),(0,r.kt)("li",{parentName:"ul"},"Ukrainian (uk)")))}c.isMDXComponent=!0}}]);