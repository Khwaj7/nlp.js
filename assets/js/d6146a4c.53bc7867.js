"use strict";(self.webpackChunknlp_docs=self.webpackChunknlp_docs||[]).push([[7654],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=u(n),d=o,f=m["".concat(s,".").concat(d)]||m[d]||p[d]||i;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3943:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>u,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const i={toc:[{value:"Reporting Issues",id:"reporting-issues",level:2},{value:"Pull Requests",id:"pull-requests",level:2},{value:"Running tests",id:"running-tests",level:2}]};function a(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"how-to-contribute"},"How to Contribute"),(0,o.kt)("h2",{id:"reporting-issues"},"Reporting Issues"),(0,o.kt)("p",null,"Should you run into issues with the project, please don't hesitate to let us know by\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/axa-group/nlp.js/issues/new"},"filing an issue"),"."),(0,o.kt)("p",null,"Pull requests containing only failing tests demonstrating an issue are also welcomed. Having these tests will help avoiding future regressions of this specific issue once it's fixed."),(0,o.kt)("h2",{id:"pull-requests"},"Pull Requests"),(0,o.kt)("p",null,"We accept ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/axa-group/nlp.js/pull/new/master"},"pull requests"),"!"),(0,o.kt)("p",null,"Generally we like to see pull requests that:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Maintain the existing code style"),(0,o.kt)("li",{parentName:"ul"},"Are focused on a single change (i.e. avoid large refactoring or style adjustments in untouched code if not the primary goal of the pull request)"),(0,o.kt)("li",{parentName:"ul"},"Have ",(0,o.kt)("a",{parentName:"li",href:"https://conventionalcommits.org/"},"conventional commits")),(0,o.kt)("li",{parentName:"ul"},"Have tests"),(0,o.kt)("li",{parentName:"ul"},"Don't decrease the current code coverage")),(0,o.kt)("h2",{id:"running-tests"},"Running tests"),(0,o.kt)("p",null,"To run tests locally, first install all dependencies."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"npm install\n")),(0,o.kt)("p",null,"From the root directory, run the tests."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"npm test\n")))}a.isMDXComponent=!0;const l={},s="Contributing",u={unversionedId:"Quickstart/contributing",id:"Quickstart/contributing",title:"Contributing",description:"",source:"@site/docs/02-Quickstart/03-contributing.mdx",sourceDirName:"02-Quickstart",slug:"/Quickstart/contributing",permalink:"/Quickstart/contributing",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Benchmarking",permalink:"/Quickstart/benchmarking"},next:{title:"Code of Conduct",permalink:"/Quickstart/code_of_conduct"}},c={},p=[],m={toc:p};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"contributing"},"Contributing"),(0,o.kt)(a,{mdxType:"Contributing"}))}d.isMDXComponent=!0}}]);