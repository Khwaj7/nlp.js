"use strict";(self.webpackChunknlp_docs=self.webpackChunknlp_docs||[]).push([[8634],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>m});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(a),m=i,h=u["".concat(l,".").concat(m)]||u[m]||c[m]||o;return a?n.createElement(h,r(r({ref:t},d),{},{components:a})):n.createElement(h,r({ref:t},d))}));function m(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=a.length,r=new Array(o);r[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var p=2;p<o;p++)r[p]=a[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},9347:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=a(7462),i=(a(7294),a(3905));const o={},r="Custom validators",s={unversionedId:"bot-orchestration/custom_validators",id:"bot-orchestration/custom_validators",title:"Custom validators",description:"Ways of gathering data",source:"@site/docs/13-bot-orchestration/03-custom_validators.mdx",sourceDirName:"13-bot-orchestration",slug:"/bot-orchestration/custom_validators",permalink:"/bot-orchestration/custom_validators",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Custom actions",permalink:"/bot-orchestration/custom_actions"},next:{title:"Cards Usage",permalink:"/bot-orchestration/cards_usage"}},l={},p=[{value:"Ways of gathering data",id:"ways-of-gathering-data",level:2},{value:"Using custom validators",id:"using-custom-validators",level:2},{value:"Creating the validator function",id:"creating-the-validator-function",level:3},{value:"Registering the validator",id:"registering-the-validator",level:3},{value:"Using the validator",id:"using-the-validator",level:3},{value:"Configuring retries",id:"configuring-retries",level:3},{value:"Configuring a fallback <em>dialog</em>",id:"configuring-a-fallback-dialog",level:3},{value:"Receiving custom parameters",id:"receiving-custom-parameters",level:3}],d=(c="GithubLink",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)});var c;const u={toc:p};function m(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"custom-validators"},"Custom validators"),(0,i.kt)("h2",{id:"ways-of-gathering-data"},"Ways of gathering data"),(0,i.kt)("p",null,"We have, mainly, two main ways of gathering data from the user:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"using the ",(0,i.kt)("a",{parentName:"li",href:"/bot-orchestration/dlg_commands_reference#ask"},(0,i.kt)("em",{parentName:"a"},"ask"))," command"),(0,i.kt)("li",{parentName:"ul"},"using custom validators"),(0,i.kt)("li",{parentName:"ul"},"using NER")),(0,i.kt)("p",null,"In this section we'll explain how to use the custom validators approach."),(0,i.kt)("h2",{id:"using-custom-validators"},"Using custom validators"),(0,i.kt)("p",null,"Probably, one of the most complete and customizable way of gathering data is by creating ",(0,i.kt)("em",{parentName:"p"},"custom validators"),".\nA ",(0,i.kt)("em",{parentName:"p"},"custom validator")," is a javascript function that is able to evaluate the user input, do whatever is needed to be done\n(for instance, validating a contract number against an API), and decide whether the user input is fine or not. If it's\nnot, we can define maximum number of attempts and a fallback dialog to execute in case the user cannot provide valid data\nwithin the defined number of attempts."),(0,i.kt)("h3",{id:"creating-the-validator-function"},"Creating the validator function"),(0,i.kt)("p",null,"A ",(0,i.kt)("em",{parentName:"p"},"validator function")," will receive the following parameters: session, context, and params.\nThe params object will contain all the params used when calling the validator from the DLG command; usually, the first\nposition will be the name of the variable where we want to store the value."),(0,i.kt)("p",null,"Let's create a file ",(0,i.kt)("em",{parentName:"p"},"pizzaTypeValidator.js")," folder:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="validators/pizzaTypeValidator.js"',title:'"validators/pizzaTypeValidator.js"'},'const pizzaTypeValidator = async (session, context, params) => {\n  const pizzas = [{ name: "carbonara" }, { name: "ricotta" }];\n\n  const input = session.text.toLowerCase();\n  const pizza = pizzas.find((p) => input.indexOf(p.name) > -1);\n\n  const isValid = pizza != undefined;\n  return isValid\n    ? { isValid, changes: [{ name: params[0], value: pizza.name }] }\n    : { isValid };\n};\n\nmodule.exports = { pizzaType: pizzaTypeValidator };\n')),(0,i.kt)("p",null,"By now, our validator will just check if the pizza the user asks for is in our list of pizzas. If it is, we return an object\n",(0,i.kt)("inlineCode",{parentName:"p"},"{ isValid, changes: [{ name: params[0], value: pizza.name }] }"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"isValid")," property will tell the bot that the\nvalidation was successful, the ",(0,i.kt)("inlineCode",{parentName:"p"},"changes")," property is an array of name/value objects which will be added to the conversation\ncontext. In our case, we're adding a variable with name ",(0,i.kt)("inlineCode",{parentName:"p"},"params[0]"),", which will correspond to the name of the variable where\nwe want to store the pizza name, and the pizza name itself as value.\nFinally, if the pizza is not in our menu, we return ",(0,i.kt)("inlineCode",{parentName:"p"},"{ isValid: false}"),", to indicate that the validation was not successful."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Note that we are exporting the ",(0,i.kt)("em",{parentName:"p"},"pizzaTypeValidator")," function with the name ",(0,i.kt)("em",{parentName:"p"},"pizzaType"),". When referring to this validator from\nthe DLG files, you'll be using a construct like askXXX, where XXX is the name of the registered validator, so exporting the\nfunction as ",(0,i.kt)("em",{parentName:"p"},"pizzaType")," will allow you to call it using the ",(0,i.kt)("em",{parentName:"p"},"askPizzaType")," command, which will be more readable than\n",(0,i.kt)("em",{parentName:"p"},"askPizzaTypeValidator"),".")),(0,i.kt)("h3",{id:"registering-the-validator"},"Registering the validator"),(0,i.kt)("p",null,"To register our new custom validator in the bot, we can make use of the method ",(0,i.kt)("em",{parentName:"p"},"registerValidator(name, fn)")," of\nthe ",(0,i.kt)(d,{to:"packages/bot/src/bot.js",mdxType:"GithubLink"},"bot")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"title= {7}",title:"","{7}":!0},'const { dockStart } = require("@nlpjs/basic");\nconst { pizzaType } = require("validators/pizzaTypeValidator.js");\n\n(async () => {\n  const dock = await dockStart();\n  const bot = dock.get("bot");\n  bot.registerValidator("pizzaType", pizzaType);\n  ...\n})();\n')),(0,i.kt)("p",null,"Note that the highlighted lines are those that have been added or modified."),(0,i.kt)("p",null,"Now, instead of just calling ",(0,i.kt)("inlineCode",{parentName:"p"},"await axabotsDockStart(defaultConf)"),", we store it in a variable named ",(0,i.kt)("em",{parentName:"p"},"dock"),", then we get the\nbot instance from the ",(0,i.kt)("em",{parentName:"p"},"dock"),", and, finally, we call the function ",(0,i.kt)("em",{parentName:"p"},"validatorsLoader"),' that will register the validators found in\nthe folder "validators" for us.'),(0,i.kt)("h3",{id:"using-the-validator"},"Using the validator"),(0,i.kt)("p",null,"Now that we have our validator, exposed as ",(0,i.kt)("em",{parentName:"p"},"pizzaType"),", registered, we can start using it. Let's edit our ",(0,i.kt)("em",{parentName:"p"},"basic-script.dlg")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-title=",metastring:"{3}","{3}":!0},"dialog order_pizza\n  say Which pizza would you like?\n  askPizzaType pizza\n  say Fine, adding a {{ pizza }} pizza to your basket.\n")),(0,i.kt)("p",null,"Now we are ready to test our validator. Start your bot and test the conversation.\nYou'll notice that if you enter one of the valid pizza names, for instance, 'carbonara', you'll receive a message like\n'Fine, adding a carbonara pizza to your basket.'; however, if you use an invalid pizza name, you just get a message saying\n'Invalid value'. Let's fix this."),(0,i.kt)("h3",{id:"configuring-retries"},"Configuring retries"),(0,i.kt)("p",null,"Custom validators by default use and object of the context called ",(0,i.kt)("em",{parentName:"p"},"validation"),". Among other things, We can use it to\nconfigure the number of retries and the ",(0,i.kt)("em",{parentName:"p"},"retry message")," to use for our validator. Let's see it by example."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-title=",metastring:"{3-4}","{3-4}":!0},"dialog order_pizza\n  say Which pizza would you like?\n  set validation.retries 1\n  set validation.message \"I'm sorry, we don't have such pizza, choose another one, please\"\n  askPizzaType pizza\n  say Fine, adding a {{pizza}} pizza to your basket.\n")),(0,i.kt)("p",null,"Using the ",(0,i.kt)("a",{parentName:"p",href:"/bot-orchestration/dlg_commands_reference#set"},"set")," command, we've configured the bot to let validators\nhave 1 retry with the retry message ",(0,i.kt)("em",{parentName:"p"},"\"I'm sorry, we don't have such pizza choose another one, please\""),"."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"The validation object will be stored in the context, meaning the current configuration will only affect the corresponding\nconversation, however, ",(0,i.kt)("strong",{parentName:"p"},"the configuration stored in the validation object will be used by any validator"),". So, if your\nflow has more than one validator, make sure to override those values accordingly before declaring each validator.")),(0,i.kt)("h3",{id:"configuring-a-fallback-dialog"},"Configuring a fallback ",(0,i.kt)("em",{parentName:"h3"},"dialog")),(0,i.kt)("p",null,"It can happen that the user is not able to send a valid value in any retry. In that case, we don't want him to get stuck\nin this part of the conversation. To overcome this problem, we can define a fallback dialog:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-title=",metastring:"{5}","{5}":!0},"dialog order_pizza\n  say Which pizza would you like?\n  set validation.retries 1\n  set validation.message \"I'm sorry, we don't have such pizza, choose another one, please\"\n  set validation.failDialog \"order_pizza_fallback\"\n  askPizzaType pizza\n  say Fine, adding a {{pizza}} pizza to your basket.\n\ndialog order_pizza_fallback\n  say We're sorry you couldn't find any pizza. Maybe next time!\n")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Note the use of double quotes in the ",(0,i.kt)("em",{parentName:"p"},"validation.message")," and the ",(0,i.kt)("em",{parentName:"p"},"validation.failDialog")," values")),(0,i.kt)("p",null,"With this setup, if the user fails twice to ask for a valid pizza, the ",(0,i.kt)("em",{parentName:"p"},"order_pizza_fallback")," dialog will be triggered.\nHowever, if you test it, you'll notice we are getting something like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-any",metastring:"{1,3,5,7}","{1,3,5,7}":!0},"user> hello\nbot > Welcome to Fabio\u2019s, the best italian restaurant on your town. How can we help you?\nuser> I would like a pizza\nbot > Which pizza would you like?\nuser> a salami one\nbot > I\u2019m sorry, we don\u2019t have such pizza, choose another one, please\nuser> then...a burrata pizza\nbot > We\u2019re sorry you couldn\u2019t find any pizza. Maybe next time!\nbot > Fine, adding a {{pizza}} pizza to your basket.\n")),(0,i.kt)("p",null,"This is because ",(0,i.kt)("strong",{parentName:"p"},"the execution of the flow is always linear"),". So, after the fallback dialog is executed, the flow will\ncontinue with the following command, which is ",(0,i.kt)("inlineCode",{parentName:"p"},"say Fine, adding a {{pizza}} pizza to your basket."),". We can fix this in two ways:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"we can restart the conversation using the ",(0,i.kt)("a",{parentName:"li",href:"/bot-orchestration/dlg_commands_reference#restart"},"restart")," command, which will\nreset the conversation as if you just opened the bot"),(0,i.kt)("li",{parentName:"ul"},"we can set a ",(0,i.kt)("a",{parentName:"li",href:"/bot-orchestration/dlg_commands_reference#conditional-execution"},"condition")," before the ",(0,i.kt)("em",{parentName:"li"},'"say Fine, adding a\n{{pizza}} pizza to your basket."')," command.\nFollowing the ",(0,i.kt)("a",{parentName:"li",href:"/bot-orchestration/dlg_commands_reference#conditional-execution"},"condition")," approach, we'd end up with the\nfollowing flow definition:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"title=bot-data/flows/basic-script.dlg {14}",title:"bot-data/flows/basic-script.dlg","{14}":!0},"import ./bot-data/flows/corpus.dlg\n\ndialog main\nsay Welcome to Fabio's, the best italian restaurant on your town. How can we help you?\nask\nnlp\n\ndialog order_pizza\nsay Which pizza would you like?\nset validation.retries 1\nset validation.message \"I'm sorry, we don't have such pizza, choose another one, please\"\nset validation.failDialog \"order_pizza_fallback\"\naskPizzaType pizza\n[pizza !== undefined] say Fine, adding a {{pizza}} pizza to your basket.\n\ndialog order_pizza_fallback\nsay We're sorry you couldn't find any pizza. Maybe next time!\n")),(0,i.kt)("h3",{id:"receiving-custom-parameters"},"Receiving custom parameters"),(0,i.kt)("p",null,"Custom validators can receive a JSON object as a parameter from the conversation flow. This is useful when your\nvalidator is designed to be used in different places with some parameterization.\nTo send a JSON object to your validator, just add it as the second parameter of the ",(0,i.kt)("em",{parentName:"p"},"askXXX")," command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'  askPizzaType pizza {"vegan":true}\n')),(0,i.kt)("p",null,"This would allow you to get the param from the validator:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const pizzaTypeValidator = async (session, context, params) => {\n  ...\n  const {vegan} = params[1];\n  ...\n}\n")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Keep in mind that the first parameter in ",(0,i.kt)("em",{parentName:"p"},"params")," is the name of the variable where the data will be stored, hence,\nwe use ",(0,i.kt)("em",{parentName:"p"},"params","[",(0,i.kt)("strong",{parentName:"em"},"1"),"]")," to retrieve the parameter value.")))}m.isMDXComponent=!0}}]);