"use strict";(self.webpackChunknlp_docs=self.webpackChunknlp_docs||[]).push([[5894],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>b});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),b=o,d=m["".concat(s,".").concat(b)]||m[b]||u[b]||i;return n?r.createElement(d,a(a({ref:t},c),{},{components:n})):r.createElement(d,a({ref:t},c))}));function b(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3550:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const i={},a="@nlpjs/builtin-compromise",l={unversionedId:"browser/builtin-compromise",id:"browser/builtin-compromise",title:"@nlpjs/builtin-compromise",description:"A golden entity extractor that runs in the browser.",source:"@site/docs/05-browser/03-builtin-compromise.mdx",sourceDirName:"05-browser",slug:"/browser/builtin-compromise",permalink:"/browser/builtin-compromise",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"node-nlp-rn",permalink:"/browser/node-nlp-rn"},next:{title:"NeuralNetwork",permalink:"/neural"}},s={},p=[{value:"Usage",id:"usage",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"nlpjsbuiltin-compromise"},"@nlpjs/builtin-compromise"),(0,o.kt)("p",null,"A golden entity extractor that runs in the browser."),(0,o.kt)("p",null,"Based on ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/spencermountain/compromise"},"https://github.com/spencermountain/compromise")),(0,o.kt)("p",null,"The Microsoft based builtins extractor only works for nodejs so this package is intended to provide golden entity extraction\nwhere nlp.js is being used in a browser."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Supports hashtags, person, place, organization ,email, phonenumber, date, url, number"),(0,o.kt)("li",{parentName:"ul"},"Supports multiple entities per utterance that are annotated as email_0, email_1")),(0,o.kt)("p",null,"See compromise documentation for details."),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const { BuiltinCompromise } = require("@nlpjs/builtin-compromise");\nconst container = await containerBootstrap();\nconst builtin = new BuiltinCompromise({});\n// Set enable to restrict list of entity extractors\nconst builtin = new BuiltinCompromise({\n  enable: [\n    "hashtags",\n    "person",\n    "place",\n    "organization",\n    "email",\n    "phonenumber",\n    "date",\n    "url",\n    "number",\n    "dimension",\n  ],\n});\ncontainer.register("extract-builtin-??", builtin, true);\n')))}u.isMDXComponent=!0}}]);